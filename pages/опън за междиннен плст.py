import streamlit as st
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from streamlit import session_state as state

st.set_page_config(layout="wide")

st.title("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –æ–ø—ä–Ω–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ –≤ –º–µ–∂–¥–∏–Ω–µ–Ω –ø–ª–∞—Å—Ç –æ—Ç –ø—ä—Ç–Ω–∞—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (—Ñ–∏–≥.9.3)")

def to_subscript(number):
    subscripts = str.maketrans("0123456789", "‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ")
    return str(number).translate(subscripts)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ session state
if 'layer_results' not in st.session_state:
    st.session_state.layer_results = {}
if 'manual_sigma_values' not in st.session_state:
    st.session_state.manual_sigma_values = {}
if 'check_results' not in st.session_state:
    st.session_state.check_results = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if not hasattr(state, 'layers_data') or len(state.layers_data) < 1:
    st.error("""
    **–ì—Ä–µ—à–∫–∞:** –õ–∏–ø—Å–≤–∞—Ç –¥–∞–Ω–Ω–∏ –æ—Ç –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞!
    –ú–æ–ª—è, –ø—ä—Ä–≤–æ –≤—ä–≤–µ–¥–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø–ª–∞—Å—Ç–æ–≤–µ—Ç–µ –≤ '–û—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ç–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' 
    """)
    st.page_link("orazmeriavane_patna_konstrukcia.py", label="‚Üê –í—ä—Ä–Ω–µ—Ç–µ —Å–µ –∫—ä–º –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞", icon="üè†")
    st.stop()

# –í–∑–∏–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
n = state.num_layers
D = state.final_D
layers_data = state.layers_data

# –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ –∑–∞ –≤—Å–µ–∫–∏ –ø–ª–∞—Å—Ç
h_values = [layer.get('h', 0.0) for layer in layers_data]
E_values = [layer.get('Ei', 0.0) for layer in layers_data]
Ed_values = [layer.get('Ed', 0.0) for layer in layers_data]

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
with st.expander("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ—Ç–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Ä–µ–¥–µ–Ω–∏)", expanded=True):
    cols = st.columns(4)
    cols[0].markdown("**–ü–ª–∞—Å—Ç**")
    cols[1].markdown("**–î–µ–±–µ–ª–∏–Ω–∞ (h)**")
    cols[2].markdown("**–ú–æ–¥—É–ª (E)**")
    cols[3].markdown("**–ú–æ–¥—É–ª (Ed)**")
    
    for i in range(n):
        cols = st.columns(4)
        cols[0].markdown(f"–ü–ª–∞—Å—Ç {i+1}")
        cols[1].write(f"{h_values[i]:.1f} cm")
        cols[2].write(f"{E_values[i]:.1f} MPa")
        cols[3].write(f"{Ed_values[i]:.1f} MPa")

# –ò–∑–±–æ—Ä –Ω–∞ –ø–ª–∞—Å—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
st.markdown("---")
st.markdown("### –ò–∑–±–æ—Ä –Ω–∞ –ø–ª–∞—Å—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑")
selected_layer = st.selectbox(
    "–ò–∑–±–µ—Ä–µ—Ç–µ –º–µ–∂–¥–∏–Ω–µ–Ω –ø–ª–∞—Å—Ç –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞",
    options=[f"–ü–ª–∞—Å—Ç {i+1}" for i in range(1, n-1)] if n > 2 else ["–ü–ª–∞—Å—Ç 1"],
    index=0
)
layer_idx = int(selected_layer.split()[-1]) - 1

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
def calculate_layer(layer_index):
    h_array = np.array(h_values[:layer_index+1])
    E_array = np.array(E_values[:layer_index+1])
    current_Ed = Ed_values[layer_index]
    
    sum_h_n_1 = h_array[:-1].sum() if layer_index > 0 else 0
    weighted_sum_n_1 = np.sum(E_array[:-1] * h_array[:-1]) if layer_index > 0 else 0
    Esr = weighted_sum_n_1 / sum_h_n_1 if sum_h_n_1 != 0 else 0
    
    H_n = h_array.sum()
    H_n_1 = sum_h_n_1
    
    results = {
        'H_n_1': H_n_1,
        'H_n': H_n,
        'Esr': Esr,
        'ratio': H_n / D if D != 0 else 0,
        'En': E_values[layer_index],
        'Ed': current_Ed,
        'Esr_over_En': Esr / E_values[layer_index] if E_values[layer_index] != 0 else 0,
        'En_over_Ed': E_values[layer_index] / current_Ed if current_Ed != 0 else 0,
        'h_values': h_values.copy(),
        'E_values': E_values.copy(),
        'n_for_calc': layer_index + 1
    }
    
    st.session_state.layer_results[layer_index] = results
    return results

# –ò–∑—á–∏—Å–ª–∏—Ç–µ–ª–µ–Ω –±–ª–æ–∫
if st.button(f"üî¢ –ò–∑—á–∏—Å–ª–∏ –∑–∞ {selected_layer}"):
    with st.spinner("–ò–∑–≤—ä—Ä—à–≤–∞–º –∏–∑—á–∏—Å–ª–µ–Ω–∏—è..."):
        results = calculate_layer(layer_idx)
        st.success(f"–ò–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞ –∑–∞ {selected_layer} —Å–∞ –≥–æ—Ç–æ–≤–∏!")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
if layer_idx in st.session_state.layer_results:
    results = st.session_state.layer_results[layer_idx]
    
    st.markdown("---")
    st.markdown(f"### üìä –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ {selected_layer}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.metric("H‚Çô‚Çã‚ÇÅ (–°—É–º–∞ –Ω–∞ –¥–µ–±–µ–ª–∏–Ω–∏—Ç–µ –¥–æ –ø–ª–∞—Å—Ç–∞)", f"{results['H_n_1']:.2f} cm")
        st.metric("H‚Çô (–û–±—â–∞ –¥–µ–±–µ–ª–∏–Ω–∞ –¥–æ –ø–ª–∞—Å—Ç–∞)", f"{results['H_n']:.2f} cm")
        st.metric("Esr (–°—Ä–µ–¥–µ–Ω –º–æ–¥—É–ª –Ω–∞ –µ–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç)", f"{results['Esr']:.2f} MPa")
        
    with col2:
        st.metric("H‚Çô/D (–û—Ç–Ω–æ—Å–∏—Ç–µ–ª–Ω–∞ –¥–µ–±–µ–ª–∏–Ω–∞)", f"{results['ratio']:.4f}")
        st.metric("E‚Çô (–ú–æ–¥—É–ª –Ω–∞ —Ç–µ–∫—É—â–∏—è –ø–ª–∞—Å—Ç)", f"{results['En']:.2f} MPa")
        st.metric("E‚Çô/Ed (–ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è)", f"{results['En_over_Ed']:.4f}")

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        df_original = pd.read_csv("danni_1.csv")
        df_new = pd.read_csv("–û—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –æ–ø—ä–Ω –∑–∞ –º–µ–∂–¥–∏–Ω–Ω–µ–Ω –ø–ª—Å—ÇH_D_1.csv")
        df_new.rename(columns={'Esr/Ei': 'sr_Ei'}, inplace=True)

        fig = go.Figure()

        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∏–∑–æ–ª–∏–Ω–∏–∏
        for level in sorted(df_original['Ei/Ed'].unique()):
            df_level = df_original[df_original['Ei/Ed'] == level].sort_values(by='H/D')
            fig.add_trace(go.Scatter(
                x=df_level['H/D'], y=df_level['y'],
                mode='lines', name=f'Ei/Ed = {round(level,3)}',
                line=dict(width=2)
            ))


        # –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ—á–∫–∞—Ç–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è
        if layer_idx > 0:
            target_sr_Ei = results['Esr_over_En']
            target_Hn_D = results['ratio']
            
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–Ω–∞ –ª–æ–≥–∏–∫–∞...
            # (–æ—Å—Ç–∞–≤–µ—Ç–µ —Å—ä—â–∞—Ç–∞ –∫–∞—Ç–æ –≤—ä–≤ –≤–∞—à–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª–µ–Ω –∫–æ–¥)
            
            # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç–∏ –∫—ä–º –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
            fig.add_trace(go.Scatter(
                x=[target_Hn_D, target_Hn_D], y=[0, y_at_ratio],
                mode='lines', line=dict(color='blue', dash='dash'),
                name='–í–µ—Ä—Ç–∏–∫–∞–ª–Ω–∞ –ª–∏–Ω–∏—è'
            ))
            
            # –û—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞...
            # (–∑–∞–ø–∞–∑–µ—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)

        fig.update_layout(
            title='–ò–∑–æ–ª–∏–Ω–∏–∏ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –æ–ø—ä–Ω–Ω–∏—Ç–µ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è',
            xaxis_title='H/D',
            yaxis_title='y',
            legend_title="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏",
            height=600
        )
        
        st.plotly_chart(fig, use_container_width=True)

        # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è...
        # (–∑–∞–ø–∞–∑–µ—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∞—Ç–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏)

    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è—Ç–∞: {str(e)}")

# –õ–∏–Ω–∫ –∑–∞ –≤—Ä—ä—â–∞–Ω–µ –∫—ä–º –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
st.markdown("---")
st.page_link("orazmeriavane_patna_konstrukcia.py", 
            label="‚Üê –í—ä—Ä–Ω–µ—Ç–µ —Å–µ –∫—ä–º –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 
            icon="üè†")
