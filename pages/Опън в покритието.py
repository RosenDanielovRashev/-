import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go
from fpdf import FPDF
from PIL import Image
import plotly.io as pio
import os
import tempfile
from io import BytesIO
import matplotlib.pyplot as plt
import matplotlib as mpl
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –≤–∏—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏
mpl.rcParams['mathtext.fontset'] = 'stix'
mpl.rcParams['font.family'] = 'STIXGeneral'
mpl.rcParams['figure.dpi'] = 300
mpl.rcParams['axes.formatter.use_mathtext'] = True

st.title("–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ")

@st.cache_data
def load_data():
    return pd.read_csv("sigma_data.csv")

data = load_data()

def compute_sigma_R(H, D, Esr, Ed):
    hD = H / D
    Esr_Ed = Esr / Ed
    tol = 1e-3
    iso_levels = sorted(data['Esr_over_Ed'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= Esr_Ed <= high + tol):
            continue

        grp_low = data[data['Esr_over_Ed'] == low].sort_values('H_over_D')
        grp_high = data[data['Esr_over_Ed'] == high].sort_values('H_over_D')

        h_min = max(grp_low['H_over_D'].min(), grp_high['H_over_D'].min())
        h_max = min(grp_low['H_over_D'].max(), grp_high['H_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        y_low = np.interp(hD, grp_low['H_over_D'], grp_low['sigma_R'])
        y_high = np.interp(hD, grp_high['H_over_D'], grp_high['sigma_R'])

        frac = 0 if np.isclose(high, low) else (Esr_Ed - low) / (high - low)
        sigma = y_low + frac * (y_high - y_low)

        return sigma, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

# UI —á–∞—Å—Ç
st.title("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –æ–ø—ä–Ω–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ –≤ –¥–æ–ª–Ω–∏—è –ø–ª–∞—Å—Ç –Ω–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ —Ñ–∏–≥.9.2")

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
D_default = st.session_state.get("final_D", 34.0)
Ei_list_full = st.session_state.get("Ei_list", [])
hi_list_full = st.session_state.get("hi_list", [])
Ei_list_default = Ei_list_full[:2] if len(Ei_list_full) >= 2 else [1000.0, 1000.0]
hi_list_default = hi_list_full[:2] if len(hi_list_full) >= 2 else [10.0, 10.0]

if len(Ei_list_full) > 2:
    st.info("‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ –¥–≤–∞ –ø–ª–∞—Å—Ç–∞ –æ—Ç –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")

D = st.selectbox(
    "–î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫–∞ –Ω–∞ –∫–æ–ª–µ–ª–æ D (—Å–º)",
    options=[34.0, 32.04, 33.0],
    index=[34.0, 32.04, 33.0].index(D_default) if D_default in [34.0, 32.04, 33.0] else 0
)

st.markdown(f"**–ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ:** 2 (—Ñ–∏–∫—Å–∏—Ä–∞–Ω –∑–∞ —Ç–æ–≤–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ)")
n = 2

Ei_list = []
hi_list = []

st.markdown("#### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ E·µ¢ –∏ h·µ¢ –∑–∞ –≤—Å–µ–∫–∏ –ø–ª–∞—Å—Ç:")
for i in range(1, n + 1):
    col1, col2 = st.columns(2)
    with col1:
        Ei = st.number_input(
            f"E{i} (MPa)",
            key=f"Ei_{i}",
            value=Ei_list_default[i - 1] if i - 1 < len(Ei_list_default) else 1000.0
        )
    with col2:
        hi = st.number_input(
            f"h{i} (—Å–º)",
            key=f"hi_{i}",
            value=hi_list_default[i - 1] if i - 1 < len(hi_list_default) else 10.0
        )
    Ei_list.append(Ei)
    hi_list.append(hi)

st.session_state["final_D"] = D
st.session_state["Ei_list"] = Ei_list
st.session_state["hi_list"] = hi_list

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ final_Ed_list
if "final_Ed_list" not in st.session_state:
    st.error("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ final_Ed_list –≤ session_state!")
    st.info("–ú–æ–ª—è, –≤—ä—Ä–Ω–µ—Ç–µ —Å–µ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –∏–∑—á–∏—Å–ª–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Å—Ç–æ–≤–µ")
    st.stop()

n_layers = len(Ei_list)
if len(st.session_state.final_Ed_list) <= n_layers:
    st.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –ø–ª–∞—Å—Ç–æ–≤–µ –≤ final_Ed_list (–∏–∑–∏—Å–∫–≤–∞ —Å–µ –ø–æ–Ω–µ {n_layers+1})!")
    st.stop()
    
Ed = st.session_state.final_Ed_list[n_layers-1]
st.session_state["final_Ed"] = Ed

st.markdown(f"""
#### üü¢ –°—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ Ed (–º–æ–¥—É–ª –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∑–µ–º–Ω–æ—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
- –í–∑–µ—Ç–∞ –æ—Ç –ø–ª–∞—Å—Ç {n_layers} 
- Ed = {Ed:.2f} MPa
""")

numerator = sum(Ei * hi for Ei, hi in zip(Ei_list, hi_list))
denominator = sum(hi_list)
Esr = numerator / denominator if denominator != 0 else 0
H = denominator

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ç–µ
st.markdown("### ‚ÑπÔ∏è –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
st.latex(r"Esr = \frac{\sum_{i=1}^{n} (E_i \cdot h_i)}{\sum_{i=1}^{n} h_i}")
st.latex(r"H = \sum_{i=1}^{n} h_i")

numerator_str = " + ".join([f"{Ei:.2f}√ó{hi:.2f}" for Ei, hi in zip(Ei_list, hi_list)])
denominator_str = " + ".join([f"{hi:.2f}" for hi in hi_list])
st.latex(fr"Esr = \frac{{{numerator_str}}}{{{denominator_str}}} = {Esr:.2f} \text{{ MPa}}")
st.latex(fr"H = {denominator_str} = {H:.2f} \text{{ —Å–º}}")

# –ò–∑—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
if denominator != 0:
    sigma, hD, y_low, y_high, low, high = compute_sigma_R(H, D, Esr, Ed)
    
    if sigma is not None:
        st.session_state["final_sigma"] = sigma
        st.session_state["final_hD"] = hD
        st.session_state["final_y_low"] = y_low
        st.session_state["final_y_high"] = y_high
        st.session_state["final_low"] = low
        st.session_state["final_high"] = high
        
        st.markdown("## üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∏–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞")
        st.markdown(f"""
        **–ò–∑—á–∏—Å–ª–µ–Ω–æ:**
        - $Esr / Ed = {Esr:.2f} / {Ed:.2f} = {Esr / Ed:.3f}$
        - $H / D = {H:.2f} / {D:.2f} = {H / D:.3f}$
        """)
        st.success(f"‚úÖ œÉR = {sigma:.3f}")
        st.info(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏: Esr/Ed = {low:.2f} –∏ {high:.2f}")

        fig = go.Figure()
        for val, group in data.groupby("Esr_over_Ed"):
            fig.add_trace(go.Scatter(
                x=group["H_over_D"],
                y=group["sigma_R"],
                mode='lines',
                name=f"Esr/Ed = {val:.1f}"
            ))
        fig.add_trace(go.Scatter(
            x=[H / D], y=[sigma],
            mode='markers',
            marker=dict(size=8, color='red'),
            name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞"
        ))
        fig.update_layout(
            title="–ù–æ–º–æ–≥—Ä–∞–º–∞: œÉR —Å—Ä–µ—â—É H/D",
            xaxis_title="H / D",
            yaxis_title="œÉR",
            height=700,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        st.plotly_chart(fig, use_container_width=True)
        st.session_state["fig"] = fig
        
    else:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏.")
else:
    st.error("–°—É–º–∞—Ç–∞ –Ω–∞ h·µ¢ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ 0.")

st.image("–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è.png", caption="–¢–∞–±–ª–∏—Ü–∞ 9.2", use_column_width=True)

# ----- PDF —á–∞—Å—Ç —Å –ø–æ–ø—Ä–∞–≤–µ–Ω–∏ —à—Ä–∏—Ñ—Ç–æ–≤–µ -----

# –¢—Ä—è–±–≤–∞ –¥–∞ –∏–º–∞—Ç–µ –ª–æ–∫–∞–ª–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ —Å DejaVu —à—Ä–∏—Ñ—Ç–æ–≤–µ –∏–ª–∏ –∏–∑—Ç–µ–≥–ª–µ—Ç–µ:
DEJAVU_REGULAR = "DejaVuSans.ttf"
DEJAVU_BOLD = "DejaVuSans-Bold.ttf"
DEJAVU_ITALIC = "DejaVuSans-Oblique.ttf"

class EnhancedPDF(FPDF):
    def __init__(self):
        super().__init__()
        self.temp_files = []
        # –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ —à—Ä–∏—Ñ—Ç–æ–≤–µ—Ç–µ
        self.add_font('DejaVu', '', DEJAVU_REGULAR, uni=True)
        self.add_font('DejaVu', 'B', DEJAVU_BOLD, uni=True)
        self.add_font('DejaVu', 'I', DEJAVU_ITALIC, uni=True)

    def footer(self):
        self.set_y(-15)
        self.set_font('DejaVu', 'I', 8)
        self.cell(0, 10, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}', 0, 0, 'C')

    def add_highres_image(self, image_data, width=180):
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
            tmp_file.write(image_data)
            self.temp_files.append(tmp_file.name)
            self.image(tmp_file.name, x=10, w=width)
            self.ln(10)

    def add_latex_formula(self, formula_text):
        try:
            img_buf = render_formula_to_image(formula_text)
            self.add_highres_image(img_buf.getvalue(), width=160)
        except Exception as e:
            self.set_font('DejaVu', '', 12)
            self.cell(0, 10, f'–§–æ—Ä–º—É–ª–∞: {formula_text}', 0, 1)
            self.ln(5)

    def cleanup_temp_files(self):
        for file_path in self.temp_files:
            try:
                os.unlink(file_path)
            except Exception:
                pass

def render_formula_to_image(formula, fontsize=14, dpi=300):
    fig = plt.figure(figsize=(8, 0.5))
    fig.text(0.02, 0.5, f'${formula}$', fontsize=fontsize, ha='left', va='center', color='black')
    plt.axis('off')
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=dpi, bbox_inches='tight', transparent=True)
    plt.close(fig)
    buf.seek(0)
    return buf

def generate_pdf_report():
    pdf = EnhancedPDF()
    pdf.set_auto_page_break(auto=True, margin=20)
    try:
        pdf.add_page()
        pdf.set_font('DejaVu', 'B', 18)
        pdf.cell(0, 15, '–û–ü–™–ù –í –ü–û–ö–†–ò–¢–ò–ï–¢–û - –û–¢–ß–ï–¢', ln=True, align='C')
        pdf.set_font('DejaVu', 'I', 12)
        pdf.cell(0, 10, f"–î–∞—Ç–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ: {datetime.today().strftime('%d.%m.%Y')}", ln=True, align='C')
        pdf.ln(15)

        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, '–í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏:', ln=True)
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(0, 10, f'–î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫–∞ D: {st.session_state["final_D"]:.2f} —Å–º', ln=True)
        pdf.ln(5)

        pdf.cell(0, 10, '–ú–æ–¥—É–ª –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –¥–µ–±–µ–ª–∏–Ω–∞ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ—Ç–µ:', ln=True)
        for i, (Ei, hi) in enumerate(zip(st.session_state["Ei_list"], st.session_state["hi_list"]), start=1):
            pdf.cell(0, 10, f'–ü–ª–∞—Å—Ç {i}: E{i} = {Ei:.2f} MPa, h{i} = {hi:.2f} —Å–º', ln=True)
        pdf.ln(5)

        pdf.cell(0, 10, f'Ed (–º–æ–¥—É–ª –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–∞—Ç–∞): {st.session_state["final_Ed"]:.2f} MPa', ln=True)
        pdf.ln(10)

        pdf.cell(0, 10, '–ò–∑—á–∏—Å–ª–µ–Ω–∏—è:', ln=True)
        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, 'Esr:', ln=True)
        pdf.set_font('DejaVu', '', 12)

        numerator_str = " + ".join([f"{Ei:.2f}√ó{hi:.2f}" for Ei, hi in zip(st.session_state["Ei_list"], st.session_state["hi_list"])])
        denominator_str = " + ".join([f"{hi:.2f}" for hi in st.session_state["hi_list"]])
        formula1 = fr"Esr = \frac{{{numerator_str}}}{{{denominator_str}}} = {numerator:.2f} / {denominator:.2f} = {numerator/denominator:.2f} \text{{ MPa}}"
        pdf.add_latex_formula(formula1)
        pdf.ln(5)
        pdf.cell(0, 10, f'H = {denominator_str} = {denominator:.2f} —Å–º', ln=True)
        pdf.ln(5)

        pdf.cell(0, 10, '–†–µ–∑—É–ª—Ç–∞—Ç:', ln=True)
        pdf.set_font('DejaVu', 'B', 16)
        pdf.cell(0, 15, f'œÉR = {st.session_state["final_sigma"]:.3f}', ln=True)
        pdf.ln(10)

        # –í–º—ä–∫–≤–∞–º–µ –≥—Ä–∞—Ñ–∏–∫–∞—Ç–∞
        if "fig" in st.session_state:
            img_bytes = pio.to_image(st.session_state["fig"], format='png', width=600, height=400, scale=2)
            pdf.add_highres_image(img_bytes, width=180)

        pdf.cleanup_temp_files()
        return pdf.output(dest='S').encode('latin-1')
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF: {str(e)}")
        return b""

if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–∞–π PDF –æ—Ç—á–µ—Ç"):
    pdf_data = generate_pdf_report()
    if pdf_data:
        st.download_button(
            label="–°–≤–∞–ª–∏ PDF",
            data=pdf_data,
            file_name="Otchet_Opan_v_Pokritieto.pdf",
            mime="application/pdf"
        )
