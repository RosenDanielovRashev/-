import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go


st.title("–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ")

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
@st.cache_data
def load_data():
    return pd.read_csv("sigma_data.csv")

data = load_data()

# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ œÉR
def compute_sigma_R(H, D, Esr, Ed):
    hD = H / D
    Esr_Ed = Esr / Ed
    tol = 1e-3
    iso_levels = sorted(data['Esr_over_Ed'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= Esr_Ed <= high + tol):
            continue

        grp_low = data[data['Esr_over_Ed'] == low].sort_values('H_over_D')
        grp_high = data[data['Esr_over_Ed'] == high].sort_values('H_over_D')

        h_min = max(grp_low['H_over_D'].min(), grp_high['H_over_D'].min())
        h_max = min(grp_low['H_over_D'].max(), grp_high['H_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        y_low = np.interp(hD, grp_low['H_over_D'], grp_low['sigma_R'])
        y_high = np.interp(hD, grp_high['H_over_D'], grp_high['sigma_R'])

        frac = 0 if np.isclose(high, low) else (Esr_Ed - low) / (high - low)
        sigma = y_low + frac * (y_high - y_low)

        return sigma, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

# –ó–∞–≥–ª–∞–≤–Ω–∞ —á–∞—Å—Ç
st.title("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –æ–ø—ä–Ω–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ –≤ –¥–æ–ª–Ω–∏—è –ø–ª–∞—Å—Ç –Ω–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ —Ñ–∏–≥.9.2")

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
st.markdown("### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ")

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç session_state –∏–ª–∏ –∑–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω–∏
D_default = st.session_state.get("final_D", 34.0)
Ei_list_full = st.session_state.get("Ei_list", [])
hi_list_full = st.session_state.get("hi_list", [])
Ei_list_default = Ei_list_full[:2] if len(Ei_list_full) >= 2 else [1000.0, 1000.0]
hi_list_default = hi_list_full[:2] if len(hi_list_full) >= 2 else [10.0, 10.0]

if len(Ei_list_full) > 2:
    st.info("‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ –¥–≤–∞ –ø–ª–∞—Å—Ç–∞ –æ—Ç –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")

# –ò–∑–±–æ—Ä –Ω–∞ –¥–∏–∞–º–µ—Ç—ä—Ä
D = st.selectbox(
    "–î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫–∞ –Ω–∞ –∫–æ–ª–µ–ª–æ D (—Å–º)",
    options=[34.0, 32.04, 33.0],
    index=[34.0, 32.04, 33.0].index(D_default) if D_default in [34.0, 32.04, 33.0] else 0
)

# –ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ (—Ñ–∏–∫—Å–∏—Ä–∞–Ω –Ω–∞ 2)
st.markdown(f"**–ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ:** 2 (—Ñ–∏–∫—Å–∏—Ä–∞–Ω –∑–∞ —Ç–æ–≤–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ)")
n = 2

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –¥–≤–∞—Ç–∞ –ø–ª–∞—Å—Ç–∞
Ei_list = []
hi_list = []

st.markdown("#### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ E·µ¢ –∏ h·µ¢ –∑–∞ –≤—Å–µ–∫–∏ –ø–ª–∞—Å—Ç:")
for i in range(1, n + 1):
    col1, col2 = st.columns(2)
    with col1:
        Ei = st.number_input(
            f"E{i} (MPa)",
            key=f"Ei_{i}",
            value=Ei_list_default[i - 1] if i - 1 < len(Ei_list_default) else 1000.0
        )
    with col2:
        hi = st.number_input(
            f"h{i} (—Å–º)",
            key=f"hi_{i}",
            value=hi_list_default[i - 1] if i - 1 < len(hi_list_default) else 10.0
        )
    Ei_list.append(Ei)
    hi_list.append(hi)

# –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—Ç–µ
st.session_state["final_D"] = D
st.session_state["Ei_list"] = Ei_list
st.session_state["hi_list"] = hi_list

# –í–∑–µ–º–∞–Ω–µ –Ω–∞ Ed –æ—Ç –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
st.markdown("---")
if "final_Ed_list" not in st.session_state:
    st.error("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ final_Ed_list –≤ session_state!")
    st.info("–ú–æ–ª—è, –≤—ä—Ä–Ω–µ—Ç–µ —Å–µ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –∏–∑—á–∏—Å–ª–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Å—Ç–æ–≤–µ")
    st.stop()

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ Ed (–º–æ–¥—É–ª –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –ø–ª–∞—Å—Ç)
n_layers = len(Ei_list)
if len(st.session_state.final_Ed_list) <= n_layers:
    st.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –ø–ª–∞—Å—Ç–æ–≤–µ –≤ final_Ed_list (–∏–∑–∏—Å–∫–≤–∞ —Å–µ –ø–æ–Ω–µ {n_layers+1})!")
    st.stop()

Ed = st.session_state.final_Ed_list[n_layers-1]
st.session_state["final_Ed"] = Ed

st.markdown(f"""
#### üü¢ –°—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ Ed (–º–æ–¥—É–ª –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∑–µ–º–Ω–æ—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
- –í–∑–µ—Ç–∞ –æ—Ç –ø–ª–∞—Å—Ç {n_layers} 
- Ed = {Ed:.0f} MPa
""")

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Esr –∏ H
numerator = sum(Ei * hi for Ei, hi in zip(Ei_list, hi_list))
denominator = sum(hi_list)
Esr = numerator / denominator if denominator != 0 else 0
H = denominator

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ç–µ
st.markdown("### ‚ÑπÔ∏è –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
st.latex(r"Esr = \frac{\sum_{i=1}^{n} (E_i \cdot h_i)}{\sum_{i=1}^{n} h_i}")
st.latex(r"H = \sum_{i=1}^{n} h_i")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∑–∞–º–µ—Å—Ç–µ–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
numerator_str = " + ".join([f"{Ei}√ó{hi}" for Ei, hi in zip(Ei_list, hi_list)])
denominator_str = " + ".join([f"{hi}" for hi in hi_list])
st.latex(fr"Esr = \frac{{{numerator_str}}}{{{denominator_str}}} = {Esr:.2f} \text{{ MPa}}")
st.latex(fr"H = {denominator_str} = {H:.2f} \text{{ —Å–º}}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ œÉR
if denominator != 0:
    sigma, hD, y_low, y_high, low, high = compute_sigma_R(H, D, Esr, Ed)
    
    if sigma is not None:
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        st.session_state["final_sigma"] = sigma
        st.session_state["final_hD"] = hD
        st.session_state["final_y_low"] = y_low
        st.session_state["final_y_high"] = y_high
        st.session_state["final_low"] = low
        st.session_state["final_high"] = high
        
        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        st.markdown("## üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∏–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞")
        st.markdown(f"""
        **–ò–∑—á–∏—Å–ª–µ–Ω–æ:**
        - $Esr / Ed = {Esr:.2f} / {Ed:.0f} = {Esr / Ed:.3f}$
        - $H / D = {H:.2f} / {D:.2f} = {H / D:.3f}$
        """)
        st.success(f"‚úÖ œÉR = {sigma:.3f}")
        st.info(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏: Esr/Ed = {low:.2f} –∏ {high:.2f}")

        # –ì—Ä–∞—Ñ–∏–∫–∞
        fig = go.Figure()
        for val, group in data.groupby("Esr_over_Ed"):
            fig.add_trace(go.Scatter(
                x=group["H_over_D"],
                y=group["sigma_R"],
                mode='lines',
                name=f"Esr/Ed = {val:.1f}"
            ))
        fig.add_trace(go.Scatter(
            x=[H / D], y=[sigma],
            mode='markers',
            marker=dict(size=8, color='red'),
            name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞"
        ))
        fig.update_layout(
            title="–ù–æ–º–æ–≥—Ä–∞–º–∞: œÉR —Å—Ä–µ—â—É H/D",
            xaxis_title="H / D",
            yaxis_title="œÉR",
            height=700
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏.")
        for key in ["final_sigma", "final_hD", "final_y_low", "final_y_high", "final_low", "final_high"]:
            if key in st.session_state:
                del st.session_state[key]
else:
    st.error("–°—É–º–∞—Ç–∞ –Ω–∞ h·µ¢ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ 0.")

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ç–µ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è
st.image("–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è.png", caption="–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è", width=800)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –∫—Ä–∞–π–Ω–æ—Ç–æ œÉR
axle_load = st.session_state.get("axle_load", 100)
p = 0.620 if axle_load == 100 else 0.633 if axle_load == 115 else None

if p is not None:
    st.markdown(f"### üí° –°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç p —Å–ø–æ—Ä–µ–¥ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä:")
    st.success(f"p = {p:.3f} MPa (–∑–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä {axle_load} kN)")
    
    sigma = st.session_state.get("final_sigma", None)
    
    if sigma is not None:
        sigma_final = 1.15 * p * sigma
        st.markdown("### –§–æ—Ä–º—É–ª–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –∫—Ä–∞–π–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR:")
        st.latex(r"\sigma_R = 1.15 \cdot p \cdot \sigma_R^{\mathrm{–Ω–æ–º–æ–≥—Ä–∞–º–∞}}")
        st.latex(rf"\sigma_R = 1.15 \times {p:.3f} \times {sigma:.3f} = {sigma_final:.3f} \text{{ MPa}}")
        st.success(f"‚úÖ –ö—Ä–∞–π–Ω–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR = {sigma_final:.3f} MPa")
        
        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –∫—Ä–∞–π–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
        st.session_state["final_sigma_R"] = sigma_final
    else:
        st.warning("‚ùó –õ–∏–ø—Å–≤–∞ œÉR –æ—Ç –Ω–æ–º–æ–≥—Ä–∞–º–∞—Ç–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ.")
else:
    st.warning("‚ùó –ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä. –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑—á–∏—Å–ª–∏ p.")

# –°–µ–∫—Ü–∏—è –∑–∞ —Ä—ä—á–Ω–æ –≤—ä–≤–µ–∂–¥–∞–Ω–µ
st.markdown(
    """
    <div style="background-color: #f0f9f0; padding: 10px; border-radius: 5px;">
        <h3 style="color: #3a6f3a; margin: 0;">–†—ä—á–Ω–æ –æ—Ç—á–∏—Ç–∞–Ω–µ œÉR —Å–ø—Ä—è–º–æ –¢–∞–±–ª–∏—Ü–∞ 9.7</h3>
    </div>
    """,
    unsafe_allow_html=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ä—ä—á–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
if 'manual_sigma_value' not in st.session_state:
    st.session_state.manual_sigma_value = 1.2

# –ü–æ–ª–µ –∑–∞ —Ä—ä—á–Ω–æ –≤—ä–≤–µ–∂–¥–∞–Ω–µ
manual_value = st.number_input(
    label="–í—ä–≤–µ–¥–µ—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –æ–ø—ä–Ω–Ω–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR [MPa] (–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ 9.7)",
    min_value=0.0,
    max_value=20.0,
    value=st.session_state.manual_sigma_value,
    step=0.1,
    key="manual_sigma_input",
    label_visibility="visible"
)

# –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä–≤–µ–¥–µ–Ω–∞—Ç–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç
st.session_state.manual_sigma_value = manual_value

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏–µ—Ç–æ
sigma_to_compare = st.session_state.get("final_sigma_R", None)

if sigma_to_compare is not None:
    check_passed = sigma_to_compare <= manual_value
    if check_passed:
        st.success(
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: "
            f"–∏–∑—á–∏—Å–ª–µ–Ω–æ—Ç–æ œÉR = {sigma_to_compare:.3f} MPa ‚â§ {manual_value:.3f} MPa (–¥–æ–ø—É—Å—Ç–∏–º–æ—Ç–æ œÉR)"
        )
    else:
        st.error(
            f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –ù–ï –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: "
            f"–∏–∑—á–∏—Å–ª–µ–Ω–æ—Ç–æ œÉR = {sigma_to_compare:.3f} MPa > {manual_value:.3f} MPa (–¥–æ–ø—É—Å—Ç–∏–º–æ—Ç–æ œÉR)"
        )
else:
    st.warning("‚ùó –ù—è–º–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç œÉR (—Å–ª–µ–¥ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏) –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞.")

# –õ–∏–Ω–∫ –∫—ä–º –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
st.page_link("orazmeriavane_patna_konstrukcia.py", label="–ö—ä–º –û—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ç–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", icon="üìÑ")
