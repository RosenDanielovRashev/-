import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go
from fpdf import FPDF
from PIL import Image
import plotly.io as pio
import os
import tempfile
import base64
from io import BytesIO
import matplotlib.pyplot as plt
from matplotlib import mathtext
from datetime import datetime

# –û–ø–∏—Ç –∑–∞ –∏–º–ø–æ—Ä—Ç –Ω–∞ cairosvg (–∑–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏)
try:
    import cairosvg  # pip install cairosvg
    _HAS_CAIROSVG = True
except Exception:
    _HAS_CAIROSVG = False

st.title("–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ")

# -----------------------------
# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
# -----------------------------
@st.cache_data
def load_data():
    return pd.read_csv("sigma_data.csv")

data = load_data()

# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ œÉR
# -----------------------------
def compute_sigma_R(H, D, Esr, Ed):
    hD = H / D if D else 0
    Esr_Ed = Esr / Ed if Ed else 0
    tol = 1e-3
    iso_levels = sorted(data['Esr_over_Ed'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= Esr_Ed <= high + tol):
            continue

        grp_low = data[data['Esr_over_Ed'] == low].sort_values('H_over_D')
        grp_high = data[data['Esr_over_Ed'] == high].sort_values('H_over_D')

        h_min = max(grp_low['H_over_D'].min(), grp_high['H_over_D'].min())
        h_max = min(grp_low['H_over_D'].max(), grp_high['H_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        y_low = np.interp(hD, grp_low['H_over_D'], grp_low['sigma_R'])
        y_high = np.interp(hD, grp_high['H_over_D'], grp_high['sigma_R'])

        frac = 0 if np.isclose(high, low) else (Esr_Ed - low) / (high - low)
        sigma = y_low + frac * (y_high - y_low)

        return sigma, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

# -----------------------------
# UI: –ó–∞–≥–ª–∞–≤–∏–µ –∏ –≤—Ö–æ–¥–æ–≤–µ
# -----------------------------
st.title("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –æ–ø—ä–Ω–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ –≤ –¥–æ–ª–Ω–∏—è –ø–ª–∞—Å—Ç –Ω–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ —Ñ–∏–≥.9.2")
st.markdown("### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ")

# –í–∑–µ–º–∞–º–µ –¥–µ—Ñ–æ–ª—Ç–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç session_state (–∞–∫–æ –∏–º–∞)
D_default = st.session_state.get("final_D", 34.0)
Ei_list_full = st.session_state.get("Ei_list", [])
hi_list_full = st.session_state.get("hi_list", [])
Ei_list_default = Ei_list_full[:2] if len(Ei_list_full) >= 2 else [1000.0, 1000.0]
hi_list_default = hi_list_full[:2] if len(hi_list_full) >= 2 else [10.0, 10.0]

if len(Ei_list_full) > 2:
    st.info("‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ –¥–≤–∞ –ø–ª–∞—Å—Ç–∞ –æ—Ç –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")

# –ò–∑–±–æ—Ä –Ω–∞ –¥–∏–∞–º–µ—Ç—ä—Ä
D = st.selectbox(
    "–î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫–∞ –Ω–∞ –∫–æ–ª–µ–ª–æ D (—Å–º)",
    options=[34.0, 32.04, 33.0],
    index=[34.0, 32.04, 33.0].index(D_default) if D_default in [34.0, 32.04, 33.0] else 0
)

# –§–∏–∫—Å–∏—Ä–∞–Ω –±—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ (2)
st.markdown(f"**–ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ:** 2 (—Ñ–∏–∫—Å–∏—Ä–∞–Ω –∑–∞ —Ç–æ–≤–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ)")
n = 2

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ Ei –∏ hi
Ei_list, hi_list = [], []
st.markdown("#### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ E·µ¢ –∏ h·µ¢ –∑–∞ –≤—Å–µ–∫–∏ –ø–ª–∞—Å—Ç:")
for i in range(1, n + 1):
    col1, col2 = st.columns(2)
    with col1:
        Ei = st.number_input(
            f"E{i} (MPa)",
            key=f"Ei_{i}",
            value=Ei_list_default[i - 1] if i - 1 < len(Ei_list_default) else 1000.0
        )
    with col2:
        hi = st.number_input(
            f"h{i} (—Å–º)",
            key=f"hi_{i}",
            value=hi_list_default[i - 1] if i - 1 < len(hi_list_default) else 10.0
        )
    Ei_list.append(Ei)
    hi_list.append(hi)

# –ó–∞–ø–∞–∑–≤–∞–Ω–µ –≤ session_state
st.session_state["final_D"] = D
st.session_state["Ei_list"] = Ei_list
st.session_state["hi_list"] = hi_list

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ Ed
st.markdown("---")
if "final_Ed_list" not in st.session_state:
    st.error("‚ö†Ô∏è –õ–∏–ø—Å–≤–∞ final_Ed_list –≤ session_state!")
    st.info("–ú–æ–ª—è, –≤—ä—Ä–Ω–µ—Ç–µ —Å–µ –Ω–∞ –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ –∏–∑—á–∏—Å–ª–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Å—Ç–æ–≤–µ")
    st.stop()

n_layers = len(Ei_list)
if len(st.session_state.final_Ed_list) <= n_layers:
    st.error(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –ø–ª–∞—Å—Ç–æ–≤–µ –≤ final_Ed_list (–∏–∑–∏—Å–∫–≤–∞ —Å–µ –ø–æ–Ω–µ {n_layers+1})!")
    st.stop()

Ed = st.session_state.final_Ed_list[n_layers-1]
st.session_state["final_Ed"] = Ed

st.markdown(f"""
#### üü¢ –°—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ Ed (–º–æ–¥—É–ª –Ω–∞ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∑–µ–º–Ω–æ—Ç–æ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ)
- –í–∑–µ—Ç–∞ –æ—Ç –ø–ª–∞—Å—Ç {n_layers} 
- Ed = {Ed:.2f} MPa
""")

# Esr –∏ H
numerator = sum(Ei * hi for Ei, hi in zip(Ei_list, hi_list))
denominator = sum(hi_list)
Esr = numerator / denominator if denominator != 0 else 0
H = denominator

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏ (Streamlit)
st.markdown("### ‚ÑπÔ∏è –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
st.latex(r"Esr = \frac{\sum_{i=1}^{n} (E_i \cdot h_i)}{\sum_{i=1}^{n} h_i}")
st.latex(r"H = \sum_{i=1}^{n} h_i")

numerator_str = " + ".join([f"{Ei:.2f}√ó{hi:.2f}" for Ei, hi in zip(Ei_list, hi_list)])
denominator_str = " + ".join([f"{hi:.2f}" for hi in hi_list])
st.latex(fr"Esr = \frac{{{numerator_str}}}{{{denominator_str}}} = {Esr:.2f} \text{{ MPa}}")
st.latex(fr"H = {denominator_str} = {H:.2f} \text{{ —Å–º}}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ œÉR
if denominator != 0:
    sigma, hD, y_low, y_high, low, high = compute_sigma_R(H, D, Esr, Ed)
    if sigma is not None:
        st.session_state["final_sigma"] = sigma
        st.session_state["final_hD"] = hD
        st.session_state["final_y_low"] = y_low
        st.session_state["final_y_high"] = y_high
        st.session_state["final_low"] = low
        st.session_state["final_high"] = high

        st.markdown("## üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∏–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞")
        st.markdown(f"""
        **–ò–∑—á–∏—Å–ª–µ–Ω–æ:**
        - $Esr / Ed = {Esr:.2f} / {Ed:.2f} = {Esr / Ed:.3f}$
        - $H / D = {H:.2f} / {D:.2f} = {H / D:.3f}$
        """)
        st.success(f"‚úÖ œÉR = {sigma:.3f}")
        st.info(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏: Esr/Ed = {low:.2f} –∏ {high:.2f}")

        # –ì—Ä–∞—Ñ–∏–∫–∞
        fig = go.Figure()
        for val, group in data.groupby("Esr_over_Ed"):
            fig.add_trace(go.Scatter(
                x=group["H_over_D"],
                y=group["sigma_R"],
                mode='lines',
                name=f"Esr/Ed = {val:.1f}"
            ))
        fig.add_trace(go.Scatter(
            x=[H / D], y=[sigma],
            mode='markers',
            marker=dict(size=8, color='red'),
            name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞"
        ))
        fig.update_layout(
            title="–ù–æ–º–æ–≥—Ä–∞–º–∞: œÉR —Å—Ä–µ—â—É H/D",
            xaxis_title="H / D",
            yaxis_title="œÉR",
            height=700,
            plot_bgcolor='white',
            paper_bgcolor='white'
        )
        st.plotly_chart(fig, use_container_width=True)
        st.session_state["fig"] = fig
    else:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏.")
        for key in ["final_sigma", "final_hD", "final_y_low", "final_y_high", "final_low", "final_high"]:
            if key in st.session_state:
                del st.session_state[key]
else:
    st.error("–°—É–º–∞—Ç–∞ –Ω–∞ h·µ¢ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ 0.")

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ç–µ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è
st.image("–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è.png", caption="–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è", width=800)

# –ö—Ä–∞–π–Ω–æ œÉR (—Å–ø—Ä—è–º–æ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä)
axle_load = st.session_state.get("axle_load", 100)
p = 0.620 if axle_load == 100 else 0.633 if axle_load == 115 else None

if p is not None:
    st.markdown(f"### üí° –°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç p —Å–ø–æ—Ä–µ–¥ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä:")
    st.success(f"p = {p:.3f} MPa (–∑–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä {axle_load} kN)")

    sigma_nom = st.session_state.get("final_sigma", None)
    if sigma_nom is not None:
        sigma_final = 1.15 * p * sigma_nom
        st.markdown("### –§–æ—Ä–º—É–ª–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –∫—Ä–∞–π–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR:")
        st.latex(r"\sigma_R = 1.15 \cdot p \cdot \sigma_R^{\mathrm{–Ω–æ–º–æ–≥—Ä–∞–º–∞}}")
        st.latex(rf"\sigma_R = 1.15 \times {p:.3f} \times {sigma_nom:.3f} = {sigma_final:.3f} \text{{ MPa}}")
        st.success(f"‚úÖ –ö—Ä–∞–π–Ω–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR = {sigma_final:.3f} MPa")
        st.session_state["final_sigma_R"] = sigma_final
    else:
        st.warning("‚ùó –õ–∏–ø—Å–≤–∞ œÉR –æ—Ç –Ω–æ–º–æ–≥—Ä–∞–º–∞—Ç–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ.")
else:
    st.warning("‚ùó –ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä. –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑—á–∏—Å–ª–∏ p.")

# –†—ä—á–Ω–æ –≤—ä–≤–µ–∂–¥–∞–Ω–µ
st.markdown(
    """
    <div style="background-color: #f0f9f0; padding: 10px; border-radius: 5px;">
        <h3 style="color: #3a6f3a; margin: 0;">–†—ä—á–Ω–æ –æ—Ç—á–∏—Ç–∞–Ω–µ œÉR —Å–ø—Ä—è–º–æ –¢–∞–±–ª–∏—Ü–∞ 9.7</h3>
    </div>
    """,
    unsafe_allow_html=True
)
if 'manual_sigma_value' not in st.session_state:
    st.session_state.manual_sigma_value = 1.20

manual_value = st.number_input(
    label="–í—ä–≤–µ–¥–µ—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –æ–ø—ä–Ω–Ω–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR [MPa] (–æ—Ç —Ç–∞–±–ª–∏—Ü–∞ 9.7)",
    min_value=0.0,
    max_value=20.0,
    value=st.session_state.manual_sigma_value,
    step=0.01,
    key="manual_sigma_input",
    format="%.2f",
    label_visibility="visible"
)
st.session_state.manual_sigma_value = manual_value

sigma_to_compare = st.session_state.get("final_sigma_R", None)
if sigma_to_compare is not None:
    check_passed = sigma_to_compare <= manual_value
    if check_passed:
        st.success(
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: "
            f"–∏–∑—á–∏—Å–ª–µ–Ω–æ—Ç–æ œÉR = {sigma_to_compare:.3f} MPa ‚â§ {manual_value:.2f} MPa (–¥–æ–ø—É—Å—Ç–∏–º–æ—Ç–æ œÉR)"
        )
    else:
        st.error(
            f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –ù–ï –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: "
            f"–∏–∑—á–∏—Å–ª–µ–Ω–æ—Ç–æ œÉR = {sigma_to_compare:.3f} MPa > {manual_value:.2f} MPa (–¥–æ–ø—É—Å—Ç–∏–º–æ—Ç–æ œÉR)"
        )
else:
    st.warning("‚ùó –ù—è–º–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç œÉR (—Å–ª–µ–¥ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏) –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞.")

# -------------------------------------------------
# –í–µ–∫—Ç–æ—Ä–µ–Ω —Ä–µ–Ω–¥–µ—Ä –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏: SVG -> PNG (–∏–ª–∏ fallback)
# -------------------------------------------------
def render_formula_to_svg(formula, output_path):
    """
    –†–µ–Ω–¥–≤–∞ —Ñ–æ—Ä–º—É–ª–∞ –∫–∞—Ç–æ SVG —á—Ä–µ–∑ matplotlib.mathtext.
    """
    parser = mathtext.MathTextParser("path")
    parser.to_svg(f"${formula}$", output_path)
    return output_path

def svg_to_png(svg_path, png_path=None, dpi=300):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞ SVG –∫—ä–º PNG —Å –≤–∏—Å–æ–∫–∞ —Ä–µ–∑–æ–ª—é—Ü–∏—è. –ò–∑–∏—Å–∫–≤–∞ cairosvg.
    """
    if not _HAS_CAIROSVG:
        raise RuntimeError("cairosvg –Ω–µ –µ –Ω–∞–ª–∏—á–µ–Ω")
    if png_path is None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_png:
            png_path = tmp_png.name
    cairosvg.svg2png(url=svg_path, write_to=png_path, dpi=dpi)
    return png_path

def render_formula_to_image_fallback(formula, fontsize=22, dpi=450):
    """
    Fallback: —Ä–µ–Ω–¥–≤–∞ —Ñ–æ—Ä–º—É–ª–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –≤ PNG —á—Ä–µ–∑ matplotlib (—Ä–∞—Å—Ç–µ—Ä–Ω–æ, –Ω–æ –≤–∏—Å–æ–∫ DPI).
    """
    fig = plt.figure(figsize=(8, 2.5))
    fig.text(0.05, 0.5, f'${formula}$', fontsize=fontsize, ha='left', va='center', usetex=False)
    plt.axis('off')
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=dpi, bbox_inches='tight', pad_inches=0.3)
    plt.close()
    buf.seek(0)
    return buf

# -------------------------------------------------
# PDF –∫–ª–∞—Å —Å –ø–æ–¥–æ–±—Ä–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏ (–±–µ–∑ —Å–∏–≤ —Ñ–æ–Ω)
# -------------------------------------------------
class EnhancedPDF(FPDF):
    def __init__(self):
        super().__init__()
        self.temp_font_files = []
        self.temp_image_files = []

    def footer(self):
        self.set_y(-15)
        self.set_font('DejaVu', 'I', 8)
        self.cell(0, 10, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}', 0, 0, 'C')

    def add_font_from_bytes(self, family, style, font_bytes):
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ttf') as tmp_file:
            tmp_file.write(font_bytes)
            tmp_file_path = tmp_file.name
            self.temp_font_files.append(tmp_file_path)
            self.add_font(family, style, tmp_file_path)

    def add_external_image(self, image_path, width=180):
        with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
            img = Image.open(image_path)
            img.save(tmp_file, format='PNG')
            tmp_file_path = tmp_file.name
            self.temp_image_files.append(tmp_file_path)
        self.image(tmp_file_path, x=10, w=width)
        self.ln(10)

    def _formula_png_from_svg_or_fallback(self, formula_text, dpi=300):
        """
        –ü—Ä–∞–≤–∏ PNG –ø—ä—Ç –æ—Ç —Ñ–æ—Ä–º—É–ª–∞ —á—Ä–µ–∑ SVG‚ÜíPNG, –∞ –∞–∫–æ –Ω—è–º–∞ cairosvg ‚Üí fallback PNG –±—É—Ñ–µ—Ä.
        –í—Ä—ä—â–∞ –ø—ä—Ç –∫—ä–º PNG —Ñ–∞–π–ª, –¥–æ–±–∞–≤–µ–Ω –∫—ä–º temp —Å–ø–∏—Å—ä–∫–∞.
        """
        try:
            # SVG –≤—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=".svg") as tmp_svg:
                render_formula_to_svg(formula_text, tmp_svg.name)
                # PNG –æ—Ç SVG
                with tempfile.NamedTemporaryFile(delete=False, suffix=".png") as tmp_png:
                    svg_to_png(tmp_svg.name, tmp_png.name, dpi=dpi)
                    png_path = tmp_png.name
            self.temp_image_files.append(png_path)
            return png_path
        except Exception:
            # Fallback: –¥–∏—Ä–µ–∫—Ç–Ω–æ PNG –æ—Ç matplotlib
            buf = render_formula_to_image_fallback(formula_text, fontsize=22, dpi=450)
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
                tmp_file.write(buf.read())
                png_path = tmp_file.name
            self.temp_image_files.append(png_path)
            return png_path

    def add_latex_formula(self, formula_text, width=100, line_gap=12):
        """
        –î–æ–±–∞–≤—è –ï–î–ù–ê —Ñ–æ—Ä–º—É–ª–∞ –∫–∞—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–≤–µ–∫—Ç–æ—Ä–µ–Ω —Ä–µ–Ω–¥–µ—Ä –¥–æ PNG), –±–µ–∑ —Ñ–æ–Ω–æ–≤–∏ –ø–ª–æ—á–∏.
        """
        try:
            png_path = self._formula_png_from_svg_or_fallback(formula_text)
            # –í–º—ä–∫–≤–∞–Ω–µ —Å —Ñ–∏–∫—Å–∏—Ä–∞–Ω–∞ —à–∏—Ä–∏–Ω–∞ ‚Üí –µ–¥–Ω–∞–∫—ä–≤ –≤–∏–∑—É–∞–ª–µ–Ω —Ä–∞–∑–º–µ—Ä
            self.image(png_path, x=self.get_x(), y=self.get_y(), w=width)
            # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª–µ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª
            self.ln(line_gap + width * 0.22)
        except Exception:
            self.set_font('DejaVu', 'I', 12)
            self.multi_cell(0, 8, formula_text)
            self.ln(5)

    def add_plotly_figure(self, fig, width=180):
        try:
            img_bytes = pio.to_image(
                fig,
                format="png",
                width=1200,
                height=900,
                scale=3,
                engine="kaleido"
            )
            with tempfile.NamedTemporaryFile(delete=False, suffix='.png') as tmp_file:
                tmp_file.write(img_bytes)
                tmp_file_path = tmp_file.name
                self.temp_image_files.append(tmp_file_path)
            self.image(tmp_file_path, x=10, w=width)
            self.ln(10)
            return True
        except Exception as e:
            print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ Plotly —Ñ–∏–≥—É—Ä–∞: {e}")
            return False

    def cleanup_temp_files(self):
        for file_path in self.temp_font_files + self.temp_image_files:
            try:
                os.unlink(file_path)
            except Exception as e:
                print(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: {e}")

    def add_formula_section(self, title, formulas, columns=2, col_width=95, img_width=85, row_gap=8):
        """
        –°–µ–∫—Ü–∏—è —Å —Ñ–æ—Ä–º—É–ª–∏, –ø–æ–¥—Ä–µ–¥–µ–Ω–∏ –ø–æ –∫–æ–ª–æ–Ω–∏, –±–µ–∑ —Ñ–æ–Ω –∏ —Å –µ–¥–Ω–∞–∫–≤–æ –º–∞—â–∞–±–∏—Ä–∞–Ω–µ.
        - img_width –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–∞ —Ä–µ–∞–ª–Ω–∞—Ç–∞ —à–∏—Ä–∏–Ω–∞ –Ω–∞ –≤—Å—è–∫–∞ —Ñ–æ—Ä–º—É–ª–∞.
        """
        self.set_font('DejaVu', 'B', 12)
        self.cell(0, 8, title, ln=True)
        self.ln(2)

        # –ì—Ä—É–ø–∏—Ä–∞–º–µ –ø–æ –±—Ä–æ—è –∫–æ–ª–æ–Ω–∏
        rows = [formulas[i:i+columns] for i in range(0, len(formulas), columns)]

        for row in rows:
            # –ù–∞—á–∞–ª–Ω–∞ X –ø–æ–∑–∏—Ü–∏—è
            start_x = 10
            self.set_x(start_x)
            max_row_height = 0  # –ø—Ä–∏ –Ω—É–∂–¥–∞ –º–æ–∂–µ –¥–∞ —Å–µ —Ä–∞–∑–≤–∏–µ –∑–∞ –æ—â–µ –ø–æ-—Ç–æ—á–µ–Ω –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª

            for idx, formula in enumerate(row):
                try:
                    png_path = self._formula_png_from_svg_or_fallback(formula)
                    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ñ–∏–∫—Å–∏—Ä–∞–Ω img_width –∑–∞ –µ–¥–Ω–∞–∫—ä–≤ —Ä–∞–∑–º–µ—Ä
                    self.image(png_path, x=self.get_x(), y=self.get_y(), w=img_width)
                except Exception:
                    # –¢–µ–∫—Å—Ç–æ–≤ fallback
                    self.set_font('DejaVu', '', 11)
                    self.multi_cell(col_width, 6, formula)
                # –ü—Ä–µ–º–µ—Å—Ç–≤–∞–º–µ –≤ —Å–ª–µ–¥–≤–∞—â–∞—Ç–∞ –∫–æ–ª–æ–Ω–∞
                self.set_x(start_x + col_width * (idx + 1))
                max_row_height = max(max_row_height, img_width * 0.28)

            # –ù–æ–≤ —Ä–µ–¥ —Å –º–∞–ª—ä–∫ –ø—Ä–æ–º–µ–∂–¥—É—Ç—ä–∫
            self.ln(max(18, int(max_row_height)) + row_gap)

        self.ln(4)

# -------------------------------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ PDF
# -------------------------------------------------
def generate_pdf_report():
    pdf = EnhancedPDF()
    pdf.set_auto_page_break(auto=True, margin=20)

    # –®—Ä–∏—Ñ—Ç–æ–≤–µ
    try:
        base_dir = os.path.dirname(os.path.abspath(__file__))
    except NameError:
        base_dir = os.getcwd()
    font_dir = os.path.join(base_dir, "fonts")
    os.makedirs(font_dir, exist_ok=True)

    sans_path = os.path.join(font_dir, "DejaVuSans.ttf")
    bold_path = os.path.join(font_dir, "DejaVuSans-Bold.ttf")
    italic_path = os.path.join(font_dir, "DejaVuSans-Oblique.ttf")

    try:
        if all(os.path.exists(p) for p in [sans_path, bold_path, italic_path]):
            with open(sans_path, "rb") as f:
                pdf.add_font_from_bytes('DejaVu', '', f.read())
            with open(bold_path, "rb") as f:
                pdf.add_font_from_bytes('DejaVu', 'B', f.read())
            with open(italic_path, "rb") as f:
                pdf.add_font_from_bytes('DejaVu', 'I', f.read())
        else:
            from fpdf.fonts import FontsByFPDF
            fonts = FontsByFPDF()
            for style, data in [('', fonts.helvetica),
                                ('B', fonts.helvetica_bold),
                                ('I', fonts.helvetica_oblique)]:
                with tempfile.NamedTemporaryFile(delete=False, suffix='.ttf') as tmp_file:
                    tmp_file.write(data)
                    pdf.add_font('DejaVu', style, tmp_file.name)
    except Exception as e:
        st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —à—Ä–∏—Ñ—Ç–æ–≤–µ: {e}")
        return b""

    # –ó–∞–≥–ª–∞–≤–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    pdf.add_page()
    pdf.set_font('DejaVu', 'B', 18)
    pdf.cell(0, 15, '–û–ü–™–ù –í –ü–û–ö–†–ò–¢–ò–ï–¢–û', ln=True, align='C')
    pdf.set_font('DejaVu', 'I', 12)
    pdf.ln(6)

    # 1. –í—Ö–æ–¥–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    pdf.set_font('DejaVu', 'B', 14)
    pdf.cell(0, 10, '1. –í—Ö–æ–¥–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏', ln=True)

    col_width = 60
    row_height = 8

    pdf.set_font('DejaVu', 'B', 11)
    pdf.set_fill_color(200, 220, 255)
    pdf.cell(col_width, row_height, '–ü–∞—Ä–∞–º–µ—Ç—ä—Ä', border=1, align='C', fill=True)
    pdf.cell(col_width, row_height, '–°—Ç–æ–π–Ω–æ—Å—Ç', border=1, align='C', fill=True)
    pdf.cell(col_width, row_height, '–ú–µ—Ä–Ω–∞ –µ–¥–∏–Ω–∏—Ü–∞', border=1, align='C', fill=True)
    pdf.ln(row_height)

    pdf.set_font('DejaVu', '', 10)
    params = [
        ("–î–∏–∞–º–µ—Ç—ä—Ä D", f"{st.session_state.final_D:.2f}", "cm"),
        ("–ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ", "2", ""),
    ]
    for i in range(2):
        params.append((f"–ü–ª–∞—Å—Ç {i+1} - Ei", f"{st.session_state.Ei_list[i]:.2f}", "MPa"))
        params.append((f"–ü–ª–∞—Å—Ç {i+1} - hi", f"{st.session_state.hi_list[i]:.2f}", "cm"))
    params.extend([
        ("Ed", f"{st.session_state.final_Ed:.2f}", "MPa"),
        ("–û—Å–æ–≤–∞ —Ç–µ–∂–µ—Å—Ç", f"{st.session_state.get('axle_load', 100)}", "kN")
    ])

    fill = False
    for p_name, p_val, p_unit in params:
        pdf.set_fill_color(245, 245, 245) if fill else pdf.set_fill_color(255, 255, 255)
        pdf.cell(col_width, row_height, p_name, border=1, fill=True)
        pdf.cell(col_width, row_height, p_val, border=1, align='C', fill=True)
        pdf.cell(col_width, row_height, p_unit, border=1, align='C', fill=True)
        pdf.ln(row_height)
        fill = not fill

    pdf.ln(5)

    # 2. –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ (–≤–µ–∫—Ç–æ—Ä–µ–Ω —Ä–µ–Ω–¥–µ—Ä)
    pdf.set_font('DejaVu', 'B', 14)
    pdf.cell(0, 10, '2. –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ', ln=True)

    formulas_section2 = [
        r"E_{sr} = \frac{\sum_{i=1}^{n} (E_i \cdot h_i)}{\sum_{i=1}^{n} h_i}",
        r"H = \sum_{i=1}^{n} h_i",
        r"\sigma_R = 1.15 \cdot p \cdot \sigma_R^{\mathrm{–Ω–æ–º–æ–≥—Ä–∞–º–∞}}",
    ]
    pdf.add_formula_section("–û—Å–Ω–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ:", formulas_section2, columns=2, col_width=95, img_width=85, row_gap=-3)

    # 3. –ò–∑—á–∏—Å–ª–µ–Ω–∏—è (—Å —á–∏—Å–ª–µ–Ω–∏ –∑–∞–º–µ—Å—Ç–≤–∞–Ω–∏—è)
    pdf.set_font('DejaVu', 'B', 14)
    pdf.cell(0, 10, '3. –ò–∑—á–∏—Å–ª–µ–Ω–∏—è', ln=True)

    num = sum(Ei * hi for Ei, hi in zip(st.session_state.Ei_list, st.session_state.hi_list))
    den = sum(st.session_state.hi_list)
    Esr_val = num / den if den else 0
    H_val = den
    num_str = " + ".join([f"{Ei:.2f} \\times {hi:.2f}" for Ei, hi in zip(st.session_state.Ei_list, st.session_state.hi_list)])
    den_str = " + ".join([f"{hi:.2f}" for hi in st.session_state.hi_list])

    formulas_section3 = [
        fr"E_{{sr}} = \frac{{{num_str}}}{{{den_str}}} = {Esr_val:.2f} \, \text{{MPa}}",
        fr"H = {den_str} = {H_val:.2f} \, \text{{cm}}"
    ]
    if 'final_sigma' in st.session_state:
        formulas_section3.append(fr"\frac{{E_{{sr}}}}{{E_d}} = \frac{{{Esr_val:.2f}}}{{{st.session_state.final_Ed:.2f}}} = {Esr_val/st.session_state.final_Ed:.3f}")
        formulas_section3.append(fr"\frac{{H}}{{D}} = \frac{{{H_val:.2f}}}{{{st.session_state.final_D:.2f}}} = {H_val/st.session_state.final_D:.3f}")
        formulas_section3.append(fr"\sigma_R^{{nom}} = {st.session_state.final_sigma:.3f} \, \text{{MPa}}")

    axle_load = st.session_state.get("axle_load", 100)
    p_loc = 0.620 if axle_load == 100 else 0.633 if axle_load == 115 else 0.0
    if p_loc and 'final_sigma' in st.session_state:
        sigma_final_loc = 1.15 * p_loc * st.session_state.final_sigma
        formulas_section3.append(fr"p = {p_loc:.3f} \, \text{{ (–∑–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä {axle_load} kN)}}")
        formulas_section3.append(fr"\sigma_R = 1.15 \times {p_loc:.3f} \times {st.session_state.final_sigma:.3f} = {sigma_final_loc:.3f} \, \text{{MPa}}")

    pdf.add_formula_section("–ò–∑—á–∏—Å–ª–∏—Ç–µ–ª–Ω–∏ —Ñ–æ—Ä–º—É–ª–∏:", formulas_section3, columns=2, col_width=95, img_width=85, row_gap=-3)

    pdf.ln(5)

    # 4. –ì—Ä–∞—Ñ–∏–∫–∞
    if "fig" in st.session_state:
        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, '4. –ì—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –Ω–æ–º–æ–≥—Ä–∞–º–∞—Ç–∞', ln=True)
        pdf.add_plotly_figure(st.session_state["fig"], width=160)

    # 5. –î–æ–ø—É—Å—Ç–∏–º–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è
    img_path = "–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è.png"
    if os.path.exists(img_path):
        pdf.set_font('DejaVu', 'B', 14)
        pdf.cell(0, 10, '5. –î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è', ln=True)
        pdf.add_external_image(img_path, width=160)

    # 6. –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
    pdf.set_font('DejaVu', 'B', 14)
    pdf.cell(0, 10, '6. –†–µ–∑—É–ª—Ç–∞—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞', ln=True)

    if 'final_sigma_R' in st.session_state and 'manual_sigma_value' in st.session_state:
        check_passed = st.session_state.final_sigma_R <= st.session_state.manual_sigma_value

        pdf.set_font('DejaVu', 'B', 10)
        pdf.set_fill_color(200, 220, 255)
        pdf.cell(90, 8, '–ü–∞—Ä–∞–º–µ—Ç—ä—Ä', border=1, align='C', fill=True)
        pdf.cell(90, 8, '–°—Ç–æ–π–Ω–æ—Å—Ç', border=1, align='C', fill=True)
        pdf.ln(8)

        pdf.set_font('DejaVu', '', 10)
        for label, val in [
            ('–ò–∑—á–∏—Å–ª–µ–Ω–æ œÉR', f"{st.session_state.final_sigma_R:.3f} MPa"),
            ('–î–æ–ø—É—Å—Ç–∏–º–æ œÉR (—Ä—ä—á–Ω–æ)', f"{st.session_state.manual_sigma_value:.2f} MPa")
        ]:
            pdf.set_fill_color(245, 245, 245) if label.startswith('–ò–∑—á–∏—Å–ª–µ–Ω–æ') else pdf.set_fill_color(255, 255, 255)
            pdf.cell(90, 8, label, border=1, fill=True)
            pdf.cell(90, 8, val, border=1, align='C', fill=True)
            pdf.ln(8)

        pdf.ln(5)
        if check_passed:
            pdf.set_text_color(0, 100, 0)
            pdf.set_font('DejaVu', 'B', 12)
            pdf.cell(0, 10, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ê", ln=True)
        else:
            pdf.set_text_color(150, 0, 0)
            pdf.set_font('DejaVu', 'B', 12)
            pdf.cell(0, 10, "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞: –ù–ï–£–î–û–í–õ–ï–¢–í–û–†–ï–ù–ê", ln=True)

        pdf.set_text_color(0, 0, 0)

    # Footer
    pdf.ln(10)
    pdf.set_font('DejaVu', 'I', 8)
    pdf.set_text_color(100, 100, 100)
    pdf.cell(0, 10, '–°—ä—Å—Ç–∞–≤–µ–Ω–æ —Å—ä—Å —Å–∏—Å—Ç–µ–º–∞ –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–∞–Ω–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –ø—ä—Ç–Ω–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', align='C')

    pdf.cleanup_temp_files()
    return pdf.output(dest='S')

# -----------------------------
# –ë—É—Ç–æ–Ω –∑–∞ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF
# -----------------------------
st.markdown("---")
st.subheader("–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF –æ—Ç—á–µ—Ç")
if st.button("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π PDF –æ—Ç—á–µ—Ç"):
    with st.spinner('–ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF –æ—Ç—á–µ—Ç...'):
        try:
            pdf_bytes = generate_pdf_report()
            if pdf_bytes:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
                    tmpfile.write(pdf_bytes)
                with open(tmpfile.name, "rb") as f:
                    base64_pdf = base64.b64encode(f.read()).decode('utf-8')
                    download_link = f'<a href="data:application/octet-stream;base64,{base64_pdf}" download="open_v_pokritieto_report.pdf">–°–≤–∞–ª–∏ PDF –æ—Ç—á–µ—Ç</a>'
                    st.markdown(download_link, unsafe_allow_html=True)
                    st.success("‚úÖ PDF –æ—Ç—á–µ—Ç—ä—Ç –µ —É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω!")
            else:
                st.error("–ù–µ—É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF. –ú–æ–ª—è, –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –≥—Ä–µ—à–∫–∏—Ç–µ –ø–æ-–≥–æ—Ä–µ.")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ PDF: {str(e)}")
