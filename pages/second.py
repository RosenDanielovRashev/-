import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objs as go

st.title("–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ")

# –ó–∞—Ä–µ–∂–¥–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏ –æ—Ç –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∞–∫–æ –∏–º–∞
Ed_default = st.session_state.get("final_Ed", 500.0)
D_default = st.session_state.get("final_D", 34.0)

# –í–∑–µ–º–∞–º–µ –ø—ä–ª–Ω–∏—Ç–µ —Å–ø–∏—Å—ä—Ü–∏, –∞–∫–æ –∏–º–∞ —Ç–∞–∫–∏–≤–∞
Ei_list_full = st.session_state.get("Ei_list", [])
hi_list_full = st.session_state.get("hi_list", [])

# –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ —Å–∞–º–æ –¥–æ –ø—ä—Ä–≤–∏—Ç–µ 2 –ø–ª–∞—Å—Ç–∞
Ei_list_default = Ei_list_full[:2]
hi_list_default = hi_list_full[:2]

# –ü–æ–∫–∞–∑–≤–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫–æ –∏–º–∞ –ø–æ–≤–µ—á–µ –æ—Ç 2
if len(Ei_list_full) > 2:
    st.info("‚ÑπÔ∏è –ò–∑–ø–æ–ª–∑–≤–∞—Ç —Å–µ —Å–∞–º–æ –ø—ä—Ä–≤–∏—Ç–µ –¥–≤–∞ –ø–ª–∞—Å—Ç–∞ –æ—Ç –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")

@st.cache_data
def load_data():
    return pd.read_csv("sigma_data.csv")

data = load_data()

def compute_sigma_R(H, D, Esr, Ed):
    hD = H / D
    Esr_Ed = Esr / Ed
    tol = 1e-3
    iso_levels = sorted(data['Esr_over_Ed'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= Esr_Ed <= high + tol):
            continue

        grp_low = data[data['Esr_over_Ed'] == low].sort_values('H_over_D')
        grp_high = data[data['Esr_over_Ed'] == high].sort_values('H_over_D')

        h_min = max(grp_low['H_over_D'].min(), grp_high['H_over_D'].min())
        h_max = min(grp_low['H_over_D'].max(), grp_high['H_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        y_low = np.interp(hD, grp_low['H_over_D'], grp_low['sigma_R'])
        y_high = np.interp(hD, grp_high['H_over_D'], grp_high['sigma_R'])

        frac = 0 if np.isclose(high, low) else (Esr_Ed - low) / (high - low)
        sigma = y_low + frac * (y_high - y_low)

        return sigma, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

st.title("–û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –æ–ø—ä–Ω–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ –≤ –¥–æ–ª–Ω–∏—è –ø–ª—Å–∞—Å—Ç –Ω–∞ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ —Ñ–∏–≥.9.2")

st.markdown("### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞ –ø–ª–∞—Å—Ç–æ–≤–µ")

# –ò–∑–±–æ—Ä –Ω–∞ D –æ—Ç –ø–∞–¥–∞—â–æ –º–µ–Ω—é
D = st.selectbox(
    "–î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫–∞ –Ω–∞ –∫–æ–ª–µ–ª–æ  D (—Å–º)",
    options=[34.0, 32.04, 33.0],
    index=[34.0, 32.04, 33.0].index(D_default) if D_default in [34.0, 32.04, 33.0] else 0
)

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ Ed
Ed = st.number_input("Ed (MPa) ‚Äì –ú–æ–¥—É–ª –Ω–∞ –µ–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç –ø–æ–¥ –ø–ª–∞—Å—Ç–∞", value=Ed_default)

# –ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ
default_n = len(Ei_list_default)
n = st.number_input("–ë—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ", min_value=1, max_value=10, step=1, value=default_n or 1)

Ei_list = []
hi_list = []

st.markdown("#### –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ E·µ¢ –∏ h·µ¢ –∑–∞ –≤—Å–µ–∫–∏ –ø–ª–∞—Å—Ç:")
for i in range(1, n + 1):
    col1, col2 = st.columns(2)
    with col1:
        Ei = st.number_input(
            f"E{i} (MPa)",
            key=f"Ei_{i}",
            value=Ei_list_default[i - 1] if i - 1 < len(Ei_list_default) else 1000.0
        )
    with col2:
        hi = st.number_input(
            f"h{i} (—Å–º)",
            key=f"hi_{i}",
            value=hi_list_default[i - 1] if i - 1 < len(hi_list_default) else 10.0
        )
    Ei_list.append(Ei)
    hi_list.append(hi)

# –ó–∞–ø–∞–∑–≤–∞–º–µ –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ session_state
st.session_state["final_D"] = D
st.session_state["final_Ed"] = Ed
st.session_state["Ei_list"] = Ei_list
st.session_state["hi_list"] = hi_list

# –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ Esr –∏ H
numerator = sum(Ei * hi for Ei, hi in zip(Ei_list, hi_list))
denominator = sum(hi_list)
if denominator == 0:
    st.error("–°—É–º–∞—Ç–∞ –Ω–∞ h·µ¢ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ 0.")
    st.stop()

Esr = numerator / denominator
H = denominator  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∑–∏–º–∞–º–µ —Å–±–æ—Ä –æ—Ç –≤—Å–∏—á–∫–∏ h·µ¢

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ç–µ
st.markdown("### ‚ÑπÔ∏è –§–æ—Ä–º—É–ª–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
st.latex(r"Esr = \frac{\sum_{i=1}^{n} (E_i \cdot h_i)}{\sum_{i=1}^{n} h_i}")
st.latex(r"H = \sum_{i=1}^{n} h_i")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∑–∞–º–µ—Å—Ç–µ–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
numerator_str = " + ".join([f"{Ei}√ó{hi}" for Ei, hi in zip(Ei_list, hi_list)])
denominator_str = " + ".join([f"{hi}" for hi in hi_list])
st.latex(fr"Esr = \frac{{{numerator_str}}}{{{denominator_str}}} = {Esr:.2f} \text{{ MPa}}")
st.latex(fr"H = {denominator_str} = {H:.2f} \text{{ —Å–º}}")

# –í–∑–µ–º–∞–º–µ –µ–≤–µ–Ω—Ç—É–∞–ª–Ω–æ –∑–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
sigma_saved = st.session_state.get("final_sigma", None)
hD_saved = st.session_state.get("final_hD", None)
y_low_saved = st.session_state.get("final_y_low", None)
y_high_saved = st.session_state.get("final_y_high", None)
low_saved = st.session_state.get("final_low", None)
high_saved = st.session_state.get("final_high", None)

if st.button("–ò–∑—á–∏—Å–ª–∏ œÉR"):
    sigma, hD, y_low, y_high, low, high = compute_sigma_R(H, D, Esr, Ed)
    
    if sigma is not None:
        # –ó–∞–ø–∞–∑–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –≤ session_state
        st.session_state["final_sigma"] = sigma
        st.session_state["final_hD"] = hD
        st.session_state["final_y_low"] = y_low
        st.session_state["final_y_high"] = y_high
        st.session_state["final_low"] = low
        st.session_state["final_high"] = high
    else:
        # –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ —Å—Ç–∞—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏, –∞–∫–æ –Ω—è–º–∞ –Ω–æ–≤–∏ –≤–∞–ª–∏–¥–Ω–∏
        for key in ["final_sigma", "final_hD", "final_y_low", "final_y_high", "final_low", "final_high"]:
            if key in st.session_state:
                del st.session_state[key]

    st.markdown("## üìã –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –∏–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞")

    if sigma is None:
        st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏.")
    else:
        st.markdown(f"""
        **–ò–∑—á–∏—Å–ª–µ–Ω–æ:**
        - $Esr / Ed = {Esr:.2f} / {Ed:.2f} = {Esr / Ed:.3f}$
        - $H / D = {H:.2f} / {D:.2f} = {H / D:.3f}$
        """)
        st.success(f"‚úÖ œÉR = {sigma:.3f}")
        st.info(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏: Esr/Ed = {low:.2f} –∏ {high:.2f}")

        fig = go.Figure()
        for val, group in data.groupby("Esr_over_Ed"):
            fig.add_trace(go.Scatter(
                x=group["H_over_D"],
                y=group["sigma_R"],
                mode='lines',
                name=f"Esr/Ed = {val:.1f}"
            ))
        fig.add_trace(go.Scatter(
            x=[H / D], y=[sigma],
            mode='markers',
            marker=dict(size=8, color='red'),
            name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞"
        ))
        fig.update_layout(
            title="–ù–æ–º–æ–≥—Ä–∞–º–∞: œÉR —Å—Ä–µ—â—É H/D",
            xaxis_title="H / D",
            yaxis_title="œÉR",
            height=700
        )
        st.plotly_chart(fig, use_container_width=True)

# –ê–∫–æ –∏–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏, –ø–æ–∫–∞–∑–≤–∞–º–µ –≥–∏ –≤–µ–¥–Ω–∞–≥–∞
elif sigma_saved is not None:
    st.markdown("## üìã –ó–∞–ø–∞–∑–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–æ—Ç–æ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ")
    st.markdown(f"""
    **–ò–∑—á–∏—Å–ª–µ–Ω–æ (–∑–∞–ø–∞–∑–µ–Ω–æ):**
    - $Esr / Ed = {Esr:.2f} / {Ed:.2f} = {Esr / Ed:.3f}$
    - $H / D = {H:.2f} / {D:.2f} = {H / D:.3f}$
    """)
    st.success(f"‚úÖ œÉR = {sigma_saved:.3f}")
    st.info(f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏–∏: Esr/Ed = {low_saved:.2f} –∏ {high_saved:.2f}")

    fig = go.Figure()
    for val, group in data.groupby("Esr_over_Ed"):
        fig.add_trace(go.Scatter(
            x=group["H_over_D"],
            y=group["sigma_R"],
            mode='lines',
            name=f"Esr/Ed = {val:.1f}"
        ))
    fig.add_trace(go.Scatter(
        x=[hD_saved], y=[sigma_saved],
        mode='markers',
        marker=dict(size=8, color='red'),
        name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞"
    ))
    fig.update_layout(
        title="–ù–æ–º–æ–≥—Ä–∞–º–∞: œÉR —Å—Ä–µ—â—É H/D",
        xaxis_title="H / D",
        yaxis_title="œÉR",
        height=700
    )
    st.plotly_chart(fig, use_container_width=True)

st.image("–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è.png", caption="–î–æ–ø—É—Å—Ç–∏–º–∏ –æ–ø—ä–Ω–Ω–∏ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏—è", width=800)

# –í–∑–µ–º–∞–Ω–µ –Ω–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä –æ—Ç –ø—ä—Ä–≤–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
axle_load = st.session_state.get("axle_load", 100)

# –û–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ p —Å–ø–æ—Ä–µ–¥ –æ—Å–æ–≤–∏—è —Ç–æ–≤–∞—Ä
if axle_load == 100:
    p = 0.620
elif axle_load == 115:
    p = 0.633
else:
    p = None
st.markdown(f"### üí° –°—Ç–æ–π–Ω–æ—Å—Ç –Ω–∞ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç p —Å–ø–æ—Ä–µ–¥ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä:")
if p is not None:
    st.success(f"p = {p:.3f} MPa (–∑–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä {axle_load} kN)")
else:
    st.warning("‚ùó –ù–µ –µ –∑–∞–¥–∞–¥–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä. –ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–∑—á–∏—Å–ª–∏ p.")

# –í–∑–µ–º–∞–º–µ sigma –æ—Ç session_state, –∞–∫–æ –∏–º–∞
sigma = st.session_state.get("final_sigma", None)

if p is not None and sigma is not None:
    sigma_final = 1.15 * p * sigma
    st.markdown("### –§–æ—Ä–º—É–ª–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –∫—Ä–∞–π–Ω–æ—Ç–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR:")
    st.latex(r"\sigma_R = 1.15 \cdot p \cdot \sigma_R^{\mathrm{–Ω–æ–º–æ–≥—Ä–∞–º–∞}}")
    st.latex(rf"\sigma_R = 1.15 \times {p:.3f} \times {sigma:.3f} = {sigma_final:.3f} \text{{ MPa}}")
    st.success(f"‚úÖ –ö—Ä–∞–π–Ω–æ –Ω–∞–ø—Ä–µ–∂–µ–Ω–∏–µ œÉR = {sigma_final:.3f} MPa")
else:
    st.warning("‚ùó –õ–∏–ø—Å–≤–∞ p –∏–ª–∏ œÉR –æ—Ç –Ω–æ–º–æ–≥—Ä–∞–º–∞—Ç–∞ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏–µ.")

# –õ–µ–∫ –∞–∫—Ü–µ–Ω—Ç –∑–∞ –∑–∞–≥–ª–∞–≤–∏–µ
st.markdown(
    """
    <div style="background-color: #f0f9f0; padding: 10px; border-radius: 5px;">
        <h3 style="color: #3a6f3a; margin: 0;">–†—ä—á–Ω–æ –æ—Ç—á–∏—Ç–∞–Ω–µ œÉR —Å–ø—Ä—è–º–æ –¢–∞–±–ª–∏—Ü–∞ 9.7</h3>
    </div>
    """,
    unsafe_allow_html=True
)

# CSS –∑–∞ —Å—Ç–∏–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ number_input
st.markdown("""
<style>
div[data-baseweb="input"] > input {
    width: 70px !important;
    padding-left: 5px !important;
    padding-right: 5px !important;
    text-align: left !important;  /* –ü–æ–¥—Ä–∞–≤–Ω—è–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—Å—Ç–∞ –≤ input */
}
</style>
""", unsafe_allow_html=True)

# –í–∑–µ–º–∞–º–µ –∏–∑—á–∏—Å–ª–µ–Ω–∞—Ç–∞ œÉR –æ—Ç –Ω–æ–º–æ–≥—Ä–∞–º–∞—Ç–∞ (–∞–∫–æ –∏–º–∞)
calculated_sigma = st.session_state.get("final_sigma", None)

# –ö–æ–ª–æ–Ω–∏ –∑–∞ —Ç–µ–∫—Å—Ç –∏ –≤—Ö–æ–¥–Ω–æ –ø–æ–ª–µ –Ω–∞ –µ–¥–∏–Ω —Ä–µ–¥
col1, col2 = st.columns([3, 1])

with col1:
    if calculated_sigma is not None:
        st.markdown(f"**œÉR = {calculated_sigma:.3f} ‚â§**")
    else:
        st.markdown("**œÉR (–∏–∑—á–∏—Å–ª–µ–Ω–æ) –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–æ ‚Äî –≤—ä–≤–µ–¥–µ—Ç–µ —Ä—ä—á–Ω–æ —Å—Ç–æ–π–Ω–æ—Å—Ç:**")

with col2:
    manual_value = st.number_input(
        label="",
        min_value=0.0,
        max_value=20.0,
        value=5.0,
        step=0.1,
        key="manual_sigma_input",
        label_visibility="collapsed"
    )

# –ë—É—Ç–æ–Ω –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ª–æ–≤–∏–µ—Ç–æ
if st.button("–ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ œÉR ‚â§ —Ä—ä—á–Ω–æ –≤—ä–≤–µ–¥–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç"):
    if calculated_sigma is None:
        st.warning("‚ùó –ù—è–º–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç œÉR –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞.")
    else:
        if calculated_sigma <= manual_value:
            st.success(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: {calculated_sigma:.3f} ‚â§ {manual_value:.3f}")
        else:
            st.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞—Ç–∞ –ù–ï –µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∞: {calculated_sigma:.3f} > {manual_value:.3f}")


st.page_link("orazmeriavane_patna_konstrukcia.py", label="–ö—ä–º –û—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ç–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", icon="üìÑ")
