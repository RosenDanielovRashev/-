import streamlit as st 
import pandas as pd
import numpy as np
import plotly.graph_objs as go

st.set_page_config(layout="wide")

st.markdown(
    """
    <style>
    .block-container {
        max-width: 1000px;
        padding-left: 2rem;
        padding-right: 2rem;
    }
    .layer-card {
        position: relative;
        width: 400px;
        height: 80px;
        background-color: #e0f7fa;
        border: 2px solid #26c6da;
        border-radius: 8px;
        margin: 15px auto 40px auto;
        padding: 10px;
        font-family: Arial, sans-serif;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .warning-box {
        background-color: #fff8e1;
        border-left: 4px solid #ffc107;
        padding: 10px;
        margin: 10px 0;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

@st.cache_data
def load_data():
    df = pd.read_csv("combined_data.csv")
    df = df.rename(columns={
        "E1_over_E2": "Ed_over_Ei",
        "Eeq_over_E2": "Ee_over_Ei"
    })
    return df

data = load_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ session state
if "num_layers" not in st.session_state:
    st.session_state.num_layers = 1
if "current_layer" not in st.session_state:
    st.session_state.current_layer = 0
if "layers_data" not in st.session_state:
    st.session_state.layers_data = [{"Ee": 2700.0, "Ei": 3000.0}]
if "axle_load" not in st.session_state:
    st.session_state.axle_load = 100
if "final_D" not in st.session_state:
    st.session_state.final_D = 32.04

st.title("–û—Ä–∞–∑–º–µ—Ä—è–≤–∞–Ω–µ –Ω–∞ –ø—ä—Ç–Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å –Ω—è–∫–æ–ª–∫–æ –ø–ª–∞—Å—Ç–æ–≤–µ")

# –ò–∑–±–æ—Ä –Ω–∞ –±—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ
num_layers = st.number_input("–í—ä–≤–µ–¥–µ—Ç–µ –±—Ä–æ–π –ø–ª–∞—Å—Ç–æ–≤–µ:", min_value=1, step=1, value=st.session_state.num_layers)
if num_layers != st.session_state.num_layers:
    st.session_state.num_layers = num_layers
    if len(st.session_state.layers_data) < num_layers:
        for i in range(len(st.session_state.layers_data), num_layers):
            # –ó–∞ –ø–ª–∞—Å—Ç–æ–≤–µ—Ç–µ –Ω–∞–¥ –ø—ä—Ä–≤–∏—è, Ee —Å–µ –≤–∑–∏–º–∞ –æ—Ç Ed –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∏—è –ø–ª–∞—Å—Ç
            prev_ed = st.session_state.layers_data[i-1].get("Ed", 2700.0)
            st.session_state.layers_data.append({"Ee": prev_ed, "Ei": 3000.0})
    elif len(st.session_state.layers_data) > num_layers:
        st.session_state.layers_data = st.session_state.layers_data[:num_layers]
    if st.session_state.current_layer >= num_layers:
        st.session_state.current_layer = num_layers - 1

# –ò–∑–±–æ—Ä –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
d_value = st.selectbox("–ò–∑–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ D (cm):", options=[32.04, 34, 33])
axle_load = st.selectbox("–ò–∑–±–µ—Ä–µ—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç –∑–∞ –æ—Å–æ–≤ —Ç–æ–≤–∞—Ä (kN):", options=[100, 115])
st.session_state.axle_load = axle_load
st.session_state.final_D = d_value

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –ø–ª–∞—Å—Ç–æ–≤–µ—Ç–µ
col1, col2, col3 = st.columns([1, 6, 1])
with col1:
    if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥–∏—à–µ–Ω –ø–ª–∞—Å—Ç"):
        if st.session_state.current_layer > 0:
            st.session_state.current_layer -= 1
with col3:
    if st.button("–°–ª–µ–¥–≤–∞—â –ø–ª–∞—Å—Ç ‚û°Ô∏è"):
        if st.session_state.current_layer < st.session_state.num_layers - 1:
            st.session_state.current_layer += 1

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â –ø–ª–∞—Å—Ç
layer_idx = st.session_state.current_layer
st.subheader(f"–í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–ª–∞—Å—Ç {layer_idx + 1}")

# –õ–µ–≥–µ–Ω–¥–∞
st.markdown("### üßæ –õ–µ–≥–µ–Ω–¥–∞:")
st.markdown("""
- **Ed** ‚Äì –ú–æ–¥—É–ª –Ω–∞ –µ–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç –Ω–∞ –ø–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç—Ç–∞ –ø–æ–¥ –ø–ª–∞—Å—Ç–∞  
- **Ei** ‚Äì –ú–æ–¥—É–ª –Ω–∞ –µ–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç –Ω–∞ –ø–ª–∞—Å—Ç–∞  
- **Ee** ‚Äì –ú–æ–¥—É–ª –Ω–∞ –µ–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç –Ω–∞ –ø–æ–≤—ä—Ä—Ö–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –ø–ª–∞—Å—Ç–∞  
- **h** ‚Äì –î–µ–±–µ–ª–∏–Ω–∞ –Ω–∞ –ø–ª–∞—Å—Ç–∞  
- **D** ‚Äì –î–∏–∞–º–µ—Ç—ä—Ä –Ω–∞ –æ—Ç–ø–µ—á–∞—Ç—ä–∫ –Ω–∞ –∫–æ–ª–µ–ª–æ—Ç–æ  
""")

# –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –ø–ª–∞—Å—Ç–∞
layer_data = st.session_state.layers_data[layer_idx]

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ Ee –∑–∞ –ø–ª–∞—Å—Ç–æ–≤–µ –Ω–∞–¥ –ø—ä—Ä–≤–∏—è
if layer_idx > 0:
    prev_layer = st.session_state.layers_data[layer_idx - 1]
    if "Ed" in prev_layer:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–¥–∞–≤–∞–Ω–µ –Ω–∞ Ee –æ—Ç Ed –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∏—è –ø–ª–∞—Å—Ç
        layer_data["Ee"] = prev_layer["Ed"]
        st.info(f"‚ÑπÔ∏è Ee –µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–¥–∞–¥–µ–Ω –æ—Ç Ed –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∏—è –ø–ª–∞—Å—Ç: {prev_layer['Ed']:.2f} MPa")
    else:
        st.warning("‚ö†Ô∏è –ü—Ä–µ–¥–∏—à–Ω–∏—è—Ç –ø–ª–∞—Å—Ç –≤—Å–µ –æ—â–µ –Ω–µ –µ –∏–∑—á–∏—Å–ª–µ–Ω. –ú–æ–ª—è, –∏–∑—á–∏—Å–ª–µ—Ç–µ –ø—Ä–µ–¥–∏—à–Ω–∏—è –ø–ª–∞—Å—Ç –ø—ä—Ä–≤–æ.")

# –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ Ee (—Å–∞–º–æ –∑–∞ —á–µ—Ç–µ–Ω–µ –∑–∞ –ø–ª–∞—Å—Ç–æ–≤–µ –Ω–∞–¥ –ø—ä—Ä–≤–∏—è)
if layer_idx == 0:
    Ee = st.number_input("Ee (MPa):", min_value=0.1, step=0.1, value=layer_data.get("Ee", 2700.0), key=f"Ee_{layer_idx}")
    layer_data["Ee"] = Ee
else:
    Ee = layer_data.get("Ee", 2700.0)
    st.write(f"**Ee (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç –ø—Ä–µ–¥–∏—à–µ–Ω –ø–ª–∞—Å—Ç):** {Ee:.2f} MPa")

Ei = st.number_input("Ei (MPa):", min_value=0.1, step=0.1, value=layer_data.get("Ei", 3000.0), key=f"Ei_{layer_idx}")
layer_data["Ei"] = Ei

mode = st.radio(
    "–ò–∑–±–µ—Ä–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –∑–∞ –æ—Ç—á–∏—Ç–∞–Ω–µ:",
    ("Ed / Ei", "h / D"),
    key=f"mode_{layer_idx}"
)

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è
def compute_Ed(h, D, Ee, Ei):
    hD = h / D
    EeEi = Ee / Ei
    tol = 1e-3
    iso_levels = sorted(data['Ee_over_Ei'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= EeEi <= high + tol):
            continue

        grp_low = data[data['Ee_over_Ei'] == low].sort_values('h_over_D')
        grp_high = data[data['Ee_over_Ei'] == high].sort_values('h_over_D')

        h_min = max(grp_low['h_over_D'].min(), grp_high['h_over_D'].min())
        h_max = min(grp_low['h_over_D'].max(), grp_high['h_over_D'].max())
        if not (h_min - tol <= hD <= h_max + tol):
            continue

        y_low = np.interp(hD, grp_low['h_over_D'], grp_low['Ed_over_Ei'])
        y_high = np.interp(hD, grp_high['h_over_D'], grp_high['Ed_over_Ei'])

        frac = 0 if np.isclose(high, low) else (EeEi - low) / (high - low)
        ed_over_ei = y_low + frac * (y_high - y_low)

        return ed_over_ei * Ei, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

def compute_h(Ed, D, Ee, Ei):
    EeEi = Ee / Ei
    EdEi = Ed / Ei
    tol = 1e-3
    iso_levels = sorted(data['Ee_over_Ei'].unique())

    for low, high in zip(iso_levels, iso_levels[1:]):
        if not (low - tol <= EeEi <= high + tol):
            continue

        grp_low = data[data['Ee_over_Ei'] == low].sort_values('h_over_D')
        grp_high = data[data['Ee_over_Ei'] == high].sort_values('h_over_D')

        h_min = max(grp_low['h_over_D'].min(), grp_high['h_over_D'].min())
        h_max = min(grp_low['h_over_D'].max(), grp_high['h_over_D'].max())

        hD_values = np.linspace(h_min, h_max, 1000)

        for hD in hD_values:
            y_low = np.interp(hD, grp_low['h_over_D'], grp_low['Ed_over_Ei'])
            y_high = np.interp(hD, grp_high['h_over_D'], grp_high['Ed_over_Ei'])
            frac = 0 if np.isclose(high, low) else (EeEi - low) / (high - low)
            ed_over_ei = y_low + frac * (y_high - y_low)

            if abs(ed_over_ei - EdEi) < tol:
                return hD * D, hD, y_low, y_high, low, high

    return None, None, None, None, None, None

def add_interpolation_line(fig, hD_point, EdEi_point, y_low, y_high, low_iso, high_iso):
    # –õ–∏–Ω–∏—è –º–µ–∂–¥—É –¥–≤–µ—Ç–µ –∏–∑–æ–ª–∏–Ω–∏ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–∞–Ω–æ hD_point
    fig.add_trace(go.Scatter(
        x=[hD_point, hD_point],
        y=[y_low, y_high],
        mode='lines',
        line=dict(color='purple', dash='dash'),
        name=f"–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è Ee/Ei: {low_iso:.2f} - {high_iso:.2f}"
    ))
    # –¢–æ—á–∫–∞ —Å —Ä–µ–∑—É–ª—Ç–∞—Ç
    fig.add_trace(go.Scatter(
        x=[hD_point],
        y=[EdEi_point],
        mode='markers',
        marker=dict(color='red', size=12),
        name='–†–µ–∑—É–ª—Ç–∞—Ç'
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –∏–∑—á–∏—Å–ª–µ–Ω–∏—è—Ç–∞
if mode == "Ed / Ei":
    h = st.number_input("–î–µ–±–µ–ª–∏–Ω–∞ h (cm):", min_value=0.1, step=0.1, value=layer_data.get("h", 4.0), key=f"h_{layer_idx}")
    if st.button("–ò–∑—á–∏—Å–ª–∏ Ed", key=f"calc_Ed_{layer_idx}"):
        result, hD_point, y_low, y_high, low_iso, high_iso = compute_Ed(h, d_value, Ee, Ei)

        if result is None:
            st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
        else:
            EdEi_point = result / Ei
            st.success(f"‚úÖ –ò–∑—á–∏—Å–ª–µ–Ω–æ: Ed / Ei = {EdEi_point:.3f}  \nEd = Ei * {EdEi_point:.3f} = {result:.2f} MPa")
            st.info(f"‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏: Ee / Ei = {low_iso:.3f} –∏ Ee / Ei = {high_iso:.3f}")

            layer_data.update({
                "Ee": Ee,
                "Ei": Ei,
                "h": h,
                "Ed": result,
                "EdEi": EdEi_point,
                "mode": mode
            })

            # –ê–∫–æ –∏–º–∞ —Å–ª–µ–¥–≤–∞—â –ø–ª–∞—Å—Ç, –æ–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–µ–≥–æ–≤–æ—Ç–æ Ee
            if layer_idx < st.session_state.num_layers - 1:
                next_layer = st.session_state.layers_data[layer_idx + 1]
                next_layer["Ee"] = result
                st.info(f"‚ÑπÔ∏è Ee –∑–∞ –ø–ª–∞—Å—Ç {layer_idx + 2} –µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–µ–Ω –Ω–∞ {result:.2f} MPa")

            fig = go.Figure()
            for value, group in data.groupby("Ee_over_Ei"):
                group_sorted = group.sort_values("h_over_D")
                fig.add_trace(go.Scatter(
                    x=group_sorted["h_over_D"],
                    y=group_sorted["Ed_over_Ei"],
                    mode='lines',
                    name=f"Ee/Ei = {value:.2f}"
                ))

            add_interpolation_line(fig, hD_point, EdEi_point, y_low, y_high, low_iso, high_iso)

            fig.update_layout(
                title="Ed / Ei –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç h / D",
                xaxis_title="h / D",
                yaxis_title="Ed / Ei",
                legend_title="–ò–∑–æ–ª–∏–Ω–∏–∏"
            )
            st.plotly_chart(fig, use_container_width=True)

elif mode == "h / D":
    Ed = st.number_input("Ed (MPa):", min_value=0.1, step=0.1, value=layer_data.get("Ed", 50.0), key=f"Ed_{layer_idx}")
    if st.button("–ò–∑—á–∏—Å–ª–∏ h", key=f"calc_h_{layer_idx}"):
        result, hD_point, y_low, y_high, low_iso, high_iso = compute_h(Ed, d_value, Ee, Ei)
        if result is None:
            st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
        else:
            st.success(f"‚úÖ –ò–∑—á–∏—Å–ª–µ–Ω–æ: h = {result:.2f} cm  \nh / D = {hD_point:.3f}")
            st.info(f"‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏: Ee / Ei = {low_iso:.3f} –∏ Ee / Ei = {high_iso:.3f}")

            layer_data.update({
                "Ee": Ee,
                "Ei": Ei,
                "h": result,
                "Ed": Ed,
                "mode": mode
            })

            # –ê–∫–æ –∏–º–∞ —Å–ª–µ–¥–≤–∞—â –ø–ª–∞—Å—Ç, –æ–±–Ω–æ–≤—è–≤–∞–º–µ –Ω–µ–≥–æ–≤–æ—Ç–æ Ee
            if layer_idx < st.session_state.num_layers - 1:
                next_layer = st.session_state.layers_data[layer_idx + 1]
                next_layer["Ee"] = Ed
                st.info(f"‚ÑπÔ∏è Ee –∑–∞ –ø–ª–∞—Å—Ç {layer_idx + 2} –µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±–Ω–æ–≤–µ–Ω –Ω–∞ {Ed:.2f} MPa")

            fig = go.Figure()
            for value, group in data.groupby("Ee_over_Ei"):
                group_sorted = group.sort_values("h_over_D")
                fig.add_trace(go.Scatter(
                    x=group_sorted["h_over_D"],
                    y=group_sorted["Ed_over_Ei"],
                    mode='lines',
                    name=f"Ee/Ei = {value:.2f}"
                ))

            add_interpolation_line(fig, hD_point, Ed / Ei, y_low, y_high, low_iso, high_iso)

            fig.update_layout(
                title="Ed / Ei –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç h / D",
                xaxis_title="h / D",
                yaxis_title="Ed / Ei",
                legend_title="–ò–∑–æ–ª–∏–Ω–∏–∏"
            )
            st.plotly_chart(fig, use_container_width=True)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
st.markdown("---")
st.header("–†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Å—Ç–æ–≤–µ")

all_data_ready = True
for i, layer in enumerate(st.session_state.layers_data):
    Ee_val = layer.get('Ee', '-')
    Ei_val = layer.get('Ei', '-')
    Ed_val = layer.get('Ed', '-')
    h_val = layer.get('h', '-')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø—ä–ª–Ω–æ—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
    if any(val == '-' for val in [Ee_val, Ei_val, Ed_val, h_val]):
        all_data_ready = False
    
    # HTML –∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Å—Ç–∞
    st.markdown(f"""
    <div class="layer-card">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                    font-weight: bold; font-size: 18px; color: #006064;">
            Ei = {Ei_val if Ei_val == '-' else f'{Ei_val:.2f}'} MPa
        </div>
        <div style="position: absolute; top: -20px; right: 10px; font-size: 14px; 
                    color: #00838f; font-weight: bold;">
            Ee = {Ee_val if Ee_val == '-' else f'{Ee_val:.2f}'} MPa
        </div>
        <div style="position: absolute; bottom: -20px; right: 10px; font-size: 14px; 
                    color: #2e7d32; font-weight: bold;">
            Ed = {Ed_val if Ed_val == '-' else f'{round(Ed_val)}'} MPa
        </div>
        <div style="position: absolute; top: 50%; left: 8px; transform: translateY(-50%); 
                    font-size: 14px; color: #d84315; font-weight: bold;">
            h = {h_val if h_val == '-' else f'{h_val:.2f}'} cm
        </div>
        <div style="position: absolute; top: -20px; left: 10px; font-size: 14px; 
                    color: #5d4037; font-weight: bold;">
            –ü–ª–∞—Å—Ç {i+1}
        </div>
    </div>
    """, unsafe_allow_html=True)

# –ë—É—Ç–æ–Ω –∑–∞ –ø—Ä–µ–º–∏–Ω–∞–≤–∞–Ω–µ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if all_data_ready:
    if st.button("üì§ –ò–∑–ø—Ä–∞—Ç–∏ –∫—ä–º '–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ'", type="primary"):
        last_layer = st.session_state.layers_data[-1]
        st.session_state.final_Ed = last_layer["Ed"]
        st.session_state.Ei_list = [layer["Ei"] for layer in st.session_state.layers_data]
        st.session_state.hi_list = [layer["h"] for layer in st.session_state.layers_data]
        st.success("‚úÖ –î–∞–Ω–Ω–∏—Ç–µ —Å–∞ –ø–æ–¥–≥–æ—Ç–≤–µ–Ω–∏ –∑–∞ –≤—Ç–æ—Ä–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        st.page_link("pages/second.py", label="–ö—ä–º –û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ", icon="üìÑ")
else:
    st.warning("‚ÑπÔ∏è –ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –≤—Å–∏—á–∫–∏ –ø–ª–∞—Å—Ç–æ–≤–µ –ø—Ä–µ–¥–∏ –¥–∞ –ø—Ä–æ–¥—ä–ª–∂–∏—Ç–µ")

# –í—Ä—ä–∑–∫–∏ –∫—ä–º –¥—Ä—É–≥–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∏
st.markdown("---")
st.subheader("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫—ä–º –¥—Ä—É–≥–∏—Ç–µ –º–æ–¥—É–ª–∏:")
col1, col2 = st.columns(2)
with col1:
    st.page_link("pages/second.py", label="–û–ø—ä–Ω –≤ –ø–æ–∫—Ä–∏—Ç–∏–µ—Ç–æ", icon="üìÑ", use_container_width=True)
with col2:
    st.page_link("pages/–æ–ø—ä–Ω –∑–∞ –º–µ–∂–¥–∏–Ω–Ω–µ–Ω –ø–ª—Å—Ç.py", label="–û–ø—ä–Ω –≤ –º–µ–∂–¥–∏–Ω–µ–Ω –ø–ª–∞—Å—Ç", icon="üìÑ", use_container_width=True)
