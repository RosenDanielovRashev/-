# –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ st.title("üìê –ö–∞–ª–∫—É–ª–∞—Ç–æ—Ä: –ú–µ—Ç–æ–¥ –Ω–∞ –ò–≤–∞–Ω–æ–≤ (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –≤–µ—Ä—Å–∏—è)")

# –í–º–µ—Å—Ç–æ —Ç–æ–≤–∞, –¥–∏—Ä–µ–∫—Ç–Ω–æ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏:
# h, Ee, Ei, d_value –≤–µ—á–µ —Å–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∞—Ç–∞ —á–∞—Å—Ç –Ω–∞ –∫–æ–¥–∞

if data is not None:
    mode = st.radio(
        "–ò–∑–±–µ—Ä–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—ä—Ä –∑–∞ –æ—Ç—á–∏—Ç–∞–Ω–µ:",
        ("Ed / Ei", "h / D")
    )

    if Ei == 0 or d_value == 0:
        st.error("Ei –∏ D –Ω–µ –º–æ–≥–∞—Ç –¥–∞ –±—ä–¥–∞—Ç 0.")
        st.stop()

    if mode == "Ed / Ei":
        # –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ h, –≤—ä–≤–µ–¥–µ–Ω–∞ –≤ –≥–æ—Ä–Ω–∞—Ç–∞ —á–∞—Å—Ç:
        h_input = h
        EeEi = Ee / Ei
        st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
        st.write(pd.DataFrame({
            "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["Ee", "Ei", "h", "D", "Ee / Ei", "h / D"],
            "–°—Ç–æ–π–Ω–æ—Å—Ç": [
                Ee,
                Ei,
                h_input,
                d_value,
                round(EeEi, 3),
                round(h_input / d_value, 3)
            ]
        }))

        if st.button("–ò–∑—á–∏—Å–ª–∏ Ed"):
            result, hD_point, y_low, y_high, low_iso, high_iso = compute_Ed(h_input, d_value, Ee, Ei)

            if result is None:
                st.warning("‚ùó –¢–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏—Ç–µ –∏–∑–æ–ª–∏–Ω–∏–∏.")
            else:
                EdEi_point = result / Ei
                st.success(f"‚úÖ –ò–∑—á–∏—Å–ª–µ–Ω–æ: Ed / Ei = {EdEi_point:.3f}  \nEd = Ei * {EdEi_point:.3f} = {result:.2f} MPa")
                st.info(f"‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏: Ee / Ei = {low_iso:.3f} –∏ Ee / Ei = {high_iso:.3f}")

                # –ü–ª–æ—Ç —Å Plotly
                fig = go.Figure()
                for value, group in data.groupby("Ee_over_Ei"):
                    group_sorted = group.sort_values("h_over_D")
                    fig.add_trace(go.Scatter(
                        x=group_sorted["h_over_D"],
                        y=group_sorted["Ed_over_Ei"],
                        mode='lines',
                        name=f"Ee / Ei = {value:.2f}",
                        line=dict(width=1)
                    ))
                fig.add_trace(go.Scatter(
                    x=[hD_point],
                    y=[EdEi_point],
                    mode='markers',
                    name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞",
                    marker=dict(size=8, color='red', symbol='circle')
                ))
                if y_low is not None and y_high is not None:
                    fig.add_trace(go.Scatter(
                        x=[hD_point, hD_point],
                        y=[y_low, y_high],
                        mode='lines',
                        line=dict(color='green', width=2, dash='dot'),
                        name="–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–Ω–∞ –ª–∏–Ω–∏—è"
                    ))
                fig.update_layout(
                    xaxis_title="h / D",
                    yaxis_title="Ed / Ei",
                    height=700
                )
                st.plotly_chart(fig, use_container_width=True)

    else:
        # –†–µ–∂–∏–º "h / D" ‚Äì –∏–∑–ø–æ–ª–∑–≤–∞–º–µ –≤—ä–≤–µ–¥–µ–Ω–∏—Ç–µ Ed, Ee, Ei, D
        Ed = st.number_input("Ed (MPa)", value=520.0)
        EeEi = Ee / Ei
        EdEi = Ed / Ei

        st.subheader("üìä –í—ä–≤–µ–¥–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
        st.write(pd.DataFrame({
            "–ü–∞—Ä–∞–º–µ—Ç—ä—Ä": ["Ed", "Ee", "Ei", "D", "Ee / Ei", "Ed / Ei"],
            "–°—Ç–æ–π–Ω–æ—Å—Ç": [
                Ed,
                Ee,
                Ei,
                d_value,
                round(EeEi, 3),
                round(EdEi, 3),
            ]
        }))

        if st.button("–ò–∑—á–∏—Å–ª–∏ h"):
            h_result, hD_point, y_low, y_high, low_iso, high_iso = compute_h(Ed, d_value, Ee, Ei)

            if h_result is None:
                st.warning("‚ùó –ù–µ—É—Å–ø–µ—à–Ω–æ –Ω–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ h ‚Äî —Ç–æ—á–∫–∞—Ç–∞ –µ –∏–∑–≤—ä–Ω –æ–±—Ö–≤–∞—Ç–∞.")
            else:
                st.success(f"‚úÖ –ò–∑—á–∏—Å–ª–µ–Ω–æ: h = {h_result:.2f} cm (h / D = {hD_point:.3f})")
                st.info(f"‚ÑπÔ∏è –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏—è –º–µ–∂–¥—É –∏–∑–æ–ª–∏–Ω–∏: Ee / Ei = {low_iso:.3f} –∏ Ee / Ei = {high_iso:.3f}")

                fig = go.Figure()
                for value, group in data.groupby("Ee_over_Ei"):
                    group_sorted = group.sort_values("h_over_D")
                    fig.add_trace(go.Scatter(
                        x=group_sorted["h_over_D"],
                        y=group_sorted["Ed_over_Ei"],
                        mode='lines',
                        name=f"Ee / Ei = {value:.2f}",
                        line=dict(width=1)
                    ))
                fig.add_trace(go.Scatter(
                    x=[hD_point],
                    y=[EdEi],
                    mode='markers',
                    name="–¢–≤–æ—è—Ç–∞ —Ç–æ—á–∫–∞",
                    marker=dict(size=8, color='red', symbol='circle')
                ))
                if y_low is not None and y_high is not None:
                    fig.add_trace(go.Scatter(
                        x=[hD_point, hD_point],
                        y=[y_low, y_high],
                        mode='lines',
                        line=dict(color='green', width=2, dash='dot'),
                        name="–ò–Ω—Ç–µ—Ä–ø–æ–ª–∞—Ü–∏–æ–Ω–Ω–∞ –ª–∏–Ω–∏—è"
                    ))
                fig.update_layout(
                    xaxis_title="h / D",
                    yaxis_title="Ed / Ei",
                    height=700
                )
                st.plotly_chart(fig, use_container_width=True)
